#ifndef _TestFileLocation_h_
#define _TestFileLocation_h_

#include <QtCore/QString>

#define REMOVE_TEST_FILES 1

/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 *
 * THIS FILE IS AUTO GENERATED AT CMAKE TIME. DO NOT EDIT THIS FILE. EDIT THE ORIGINAL TEMPLATE FILE
 * LOCATED AT @DREAM3DProj_SOURCE_DIR@@DIR_SEP@Test@DIR_SEP@TestFileLocations.h.in
 *
 *
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  */


namespace UnitTest
{

  const QString DataDir("@DREAM3D_DATA_DIR@");

  // -----------------------------------------------------------------------------
  //  Define where to put our temporary files for the H5Utilities Test
  // -----------------------------------------------------------------------------
  namespace H5UtilTest
  {
    const QString TestDir("H5UtilTest");
    const QString FileName("@TEST_TEMP_DIR_NATIVE@H5Utilities_Test.h5");
    const QString GroupTest("@TEST_TEMP_DIR_NATIVE@H5Utilities_GroupTest.h5");
  }

  // -----------------------------------------------------------------------------
  //  Define where to put our temporary files for the H5Lite Test
  // -----------------------------------------------------------------------------
  namespace H5LiteTest
  {
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@H5LiteTest");
    const QString FileName("@TEST_TEMP_DIR_NATIVE@H5Lite_Test.h5");
    const QString LargeFile("@TEST_TEMP_DIR_NATIVE@H5Lite_LargeFile_Test.h5");
  }

  namespace DataArrayTest
  {
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@DataArrayTest");
    const QString TestFile("@TEST_TEMP_DIR_NATIVE@DataArrayTest@DIR_SEP@DataArrayTest.h5");
  }


  namespace DxIOTest
  {
    static const QString TestFile("@TEST_TEMP_DIR_NATIVE@DxIOTest.dx");
    static const size_t XSize = 3;
    static const size_t YSize = 4;
    static const size_t ZSize = 5;
    static const size_t Offset = 100;
  }

  namespace PhIOTest
  {
    const QString TestFile("@TEST_TEMP_DIR_NATIVE@PhIOTest.ph");
    static const size_t XSize = 5;
    static const size_t YSize = 4;
    static const size_t ZSize = 3;
    static const size_t Offset = 200;
  }

  namespace VtkGrainIdIOTest
  {
    const QString TestFile("@TEST_TEMP_DIR_NATIVE@VtkGrainIdIOTest.vtk");
    static const size_t XSize = 5;
    static const size_t YSize = 4;
    static const size_t ZSize = 3;
    static const size_t Offset = 300;
  }

  namespace VTKFileWritersTest
  {
    static const QString TestFile("@TEST_TEMP_DIR_NATIVE@VtkIOTest.vtk");
    static const size_t XSize = 2;
    static const size_t YSize = 10;
    static const size_t ZSize = 5;
    static const size_t Offset = 66;
  }

  namespace NeighborListTest
  {
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@NeighborListTest");
  }

  namespace SyntheticBuilderTest
  {
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@SyntheticBuilderTest");
    const QString CsvFile("@TEST_TEMP_DIR_NATIVE@SyntheticBuilderTest@DIR_SEP@SyntheticBuilderTest.csv");
    const QString OutputFile("@TEST_TEMP_DIR_NATIVE@SyntheticBuilderTest@DIR_SEP@SyntheticBuilderTest.h5");
    const QString VtkOutputFile("@TEST_TEMP_DIR_NATIVE@SyntheticBuilderTest@DIR_SEP@SyntheticBuilderTest.vtk");

  }

  namespace FindNeighborTest
  {
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@FindNeighborTest");
    const QString OutputFile("@TEST_TEMP_DIR_NATIVE@FindNeighborTest@DIR_SEP@FindNeighborTest.h5");
    const QString StatsFile("@TEST_TEMP_DIR_NATIVE@FindNeighborTest@DIR_SEP@FindNeighborTest_Stats.h5");
    const QString OutputFile2("@TEST_TEMP_DIR_NATIVE@FindNeighborTest@DIR_SEP@OtherTestOutput.h5");
    const QString VtkOutputFile("@TEST_TEMP_DIR_NATIVE@FindNeighborTest@DIR_SEP@FindNeighborTest.vtk");
  }

  namespace DataContainerIOTest
  {
    static const size_t Offset = 800;
    static const size_t XSize = 5;
    static const size_t YSize = 4;
    static const size_t ZSize = 3;
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@DataContainerIOTest");
    const QString TestFile("@TEST_TEMP_DIR_NATIVE@DataContainerIOTest@DIR_SEP@DataContainerIOTest.h5");
    const QString TestFile2("@TEST_TEMP_DIR_NATIVE@DataContainerIOTest@DIR_SEP@DataContainerIOTest_Rewrite.h5");
  }

  namespace StatsDataTest
  {
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@StatsDataTest");
    const QString TestFile("@TEST_TEMP_DIR_NATIVE@StatsDataTest@DIR_SEP@StatsDataTest.h5");
    const QString TestFile2("@TEST_TEMP_DIR_NATIVE@StatsDataTest@DIR_SEP@StatsDataTest_rewrite.h5");
  }

  namespace RawBinaryReaderTest
  {
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@RawBinaryReaderTest");
    const QString OutputFile("@TEST_TEMP_DIR_NATIVE@RawBinaryReaderTest@DIR_SEP@Output.bin");
  }

  namespace SyntheticTest
  {
//    const QString TestDir("@TEST_TEMP_DIR_NATIVE@SyntheticTest");
//    const QString MatrixPrecipitateInputFile("@DREAM3D_SUPPORT_DIR@Data@DIR_SEP@2Phase_Matrix_Precipitate.dream3d");
    const QString OutputFile("@TEST_TEMP_DIR_NATIVE@SyntheticTestOutput.dream3d");
  }

  namespace FilterParametersRWTest
  {
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@FilterParametersRWTest");
    const QString OutputFile("@TEST_TEMP_DIR_NATIVE@FilterParametersRWTest@DIR_SEP@Output.h5");
    const QString TestFile_1("@TEST_TEMP_DIR_NATIVE@FilterParametersRWTest@DIR_SEP@TestFile_1.h5");
    const QString TestFile_2("@TEST_TEMP_DIR_NATIVE@FilterParametersRWTest@DIR_SEP@TestFile_2.h5");
    const QString TestFile_3("@TEST_TEMP_DIR_NATIVE@FilterParametersRWTest@DIR_SEP@TestFile_3.h5");
  }

  namespace PFTest
  {
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@PoleFigureTest@DIR_SEP@");
  }

  namespace AngleFileLoaderTest
  {
    const QString TestDir("@TEST_TEMP_DIR_NATIVE@AngleFileLoaderTest");
    const QString OutputFile("@TEST_TEMP_DIR_NATIVE@AngleFileLoaderTest@DIR_SEP@AngleTestFile.txt");
  }

  namespace LambertRWTest
  {
    const QString TestFile("@TEST_TEMP_DIR_NATIVE@LambertRWTest.h5");
  }
}

// -----------------------------------------------------------------------------
//  Define the temp directory for this system
// -----------------------------------------------------------------------------
//#define TEST_TEMP_DIR_NATIVE "@TEST_TEMP_DIR_NATIVE_NATIVE@"
namespace MXAUnitTest
{
  const QString MXATempDir("@TEST_TEMP_DIR_NATIVE@");
  const QString MXATestBinaryDirectory("@DREAM3DProj_BIN_DIR_NATIVE@");
  const QString MXABuildDir("@DREAM3DProj_BUILD_DIR_NATIVE@");

#if defined (WIN32)
  static const char DirSeparator = '\\';
#else
  static const char DirSeparator = '@DIR_SEP@';
#endif

  namespace SupportFileTest
  {
    const QString OutputFile("@TEST_TEMP_DIR_NATIVE@SupportFileTest.h5");
    const QString BinaryInputFile("@TEST_TEMP_DIR_NATIVE@SupportFileTest_Input.bin");
    const QString TextInputFile("@DATAIMPORT_TEST_IMPORT_XML_FILE@");
  }

  namespace MXAFileReaderWriterTest
  {
    const QString OutputFile("@TEST_TEMP_DIR_NATIVE@MXAFileReaderWriter.bin");
  }

  namespace MXAFileSystemPathTest
  {
    const QString OutputFile("@TEST_TEMP_DIR_NATIVE@MXAFileSystemPath.bin");
    const QString OutputFileName("MXAFileSystemPath.bin");
    const QString TestDirName1("Directory1");
    const QString TestDirName2("Directory2");
    const QString TestDir("MXAFileSystemPathTest");
    const QString Extension("bin");
  }

  namespace DataImportTest
  {
    const QString TestDir("DataImportTest");
    const QString H5TiffOutputFile("@DATAIMPORT_TEST_XMLH5TIFF_OUTPUT_FILE@");
    const QString ImportXMLFile("@DATAIMPORT_TEST_IMPORT_XML_FILE@");
    const QString SimpleImport("@TEST_TEMP_DIR_NATIVE@DataImportTestSimpleFile.h5");
  }

  // -----------------------------------------------------------------------------
  //  Define where to put our temporary files for the DataModel Test
  // -----------------------------------------------------------------------------
  namespace DataModelTest
  {
    const QString TestDir("DataModelTest");
    const QString BeforeH5File("@TEST_TEMP_DIR_NATIVE@DataModelTest-Before.h5");
    const QString AfterH5File("@TEST_TEMP_DIR_NATIVE@DataModelTest-After.h5");
    const QString OverwriteH5File("@TEST_TEMP_DIR_NATIVE@DataModelOverWrite_Test.h5");
  }

}
#endif
