#ifndef _TestFileLocation_h_
#define _TestFileLocation_h_
#include <string>

#define REMOVE_TEST_FILES 1

/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 *
 * THIS FILE IS AUTO GENERATED AT CMAKE TIME. DO NOT EDIT THIS FILE. EDIT THE ORIGINAL TEMPLATE FILE
 * LOCATED AT @DREAM3DProj_SOURCE_DIR@/Test/TestFileLocations.h.in
 *
 *
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  */


namespace UnitTest
{

  const std::string DataDir("@DREAM3D_DATA_DIR@");

  // -----------------------------------------------------------------------------
  //  Define where to put our temporary files for the H5Utilities Test
  // -----------------------------------------------------------------------------
  namespace H5UtilTest
  {
    const std::string TestDir("H5UtilTest");
    const std::string FileName("@TEST_TEMP_DIR@/H5Utilities_Test.h5");
    const std::string GroupTest("@TEST_TEMP_DIR@/H5Utilities_GroupTest.h5");
  }

  // -----------------------------------------------------------------------------
  //  Define where to put our temporary files for the H5Lite Test
  // -----------------------------------------------------------------------------
  namespace H5LiteTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/H5LiteTest");
    const std::string FileName("@TEST_TEMP_DIR@/H5Lite_Test.h5");
    const std::string LargeFile("@TEST_TEMP_DIR@/H5Lite_LargeFile_Test.h5");
  }

  namespace DataArrayTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/DataArrayTest");
    const std::string TestFile("@TEST_TEMP_DIR@/DataArrayTest/DataArrayTest.h5");
  }


  namespace DxIOTest
  {
    static const std::string TestFile("@TEST_TEMP_DIR@/DxIOTest.dx");
    static const size_t XSize = 3;
    static const size_t YSize = 4;
    static const size_t ZSize = 5;
    static const size_t Offset = 100;
  }

  namespace PhIOTest
  {
    const std::string TestFile("@TEST_TEMP_DIR@/PhIOTest.ph");
    static const size_t XSize = 5;
    static const size_t YSize = 4;
    static const size_t ZSize = 3;
    static const size_t Offset = 200;
  }

  namespace VtkGrainIdIOTest
  {
    const std::string TestFile("@TEST_TEMP_DIR@/VtkGrainIdIOTest.vtk");
    static const size_t XSize = 5;
    static const size_t YSize = 4;
    static const size_t ZSize = 3;
    static const size_t Offset = 300;
  }

  namespace VTKFileWritersTest
  {
    static const std::string TestFile("@TEST_TEMP_DIR@/VtkIOTest.vtk");
    static const size_t XSize = 2;
    static const size_t YSize = 10;
    static const size_t ZSize = 5;
    static const size_t Offset = 66;
  }

  namespace NeighborListTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/NeighborListTest");
  }

  namespace SyntheticBuilderTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/SyntheticBuilderTest");
    const std::string CsvFile("@TEST_TEMP_DIR@/SyntheticBuilderTest/SyntheticBuilderTest.csv");
    const std::string OutputFile("@TEST_TEMP_DIR@/SyntheticBuilderTest/SyntheticBuilderTest.h5");
    const std::string VtkOutputFile("@TEST_TEMP_DIR@/SyntheticBuilderTest/SyntheticBuilderTest.vtk");

  }

  namespace FindNeighborTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/FindNeighborTest");
    const std::string OutputFile("@TEST_TEMP_DIR@/FindNeighborTest/FindNeighborTest.h5");
    const std::string StatsFile("@TEST_TEMP_DIR@/FindNeighborTest/FindNeighborTest_Stats.h5");
    const std::string OutputFile2("@TEST_TEMP_DIR@/FindNeighborTest/OtherTestOutput.h5");
    const std::string VtkOutputFile("@TEST_TEMP_DIR@/FindNeighborTest/FindNeighborTest.vtk");
  }

  namespace DataContainerIOTest
  {
    static const size_t Offset = 800;
    static const size_t XSize = 5;
    static const size_t YSize = 4;
    static const size_t ZSize = 3;
    const std::string TestDir("@TEST_TEMP_DIR@/DataContainerIOTest");
    const std::string TestFile("@TEST_TEMP_DIR@/DataContainerIOTest/DataContainerIOTest.h5");
    const std::string TestFile2("@TEST_TEMP_DIR@/DataContainerIOTest/DataContainerIOTest_Rewrite.h5");
  }

  namespace StatsDataTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/StatsDataTest");
    const std::string TestFile("@TEST_TEMP_DIR@/StatsDataTest/StatsDataTest.h5");
    const std::string TestFile2("@TEST_TEMP_DIR@/StatsDataTest/StatsDataTest_rewrite.h5");
  }

  namespace RawBinaryReaderTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/RawBinaryReaderTest");
    const std::string OutputFile("@TEST_TEMP_DIR@/RawBinaryReaderTest/Output.bin");
  }

  namespace SyntheticTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/SyntheticTest");
    const std::string MatrixPrecipitateInputFile("@DREAM3D_SUPPORT_DIR@/Data/2Phase_Matrix_Precipitate.dream3d");
    const std::string OutputFile("@TEST_TEMP_DIR@/SyntheticTestOutput.dream3d");
  }

  namespace FilterParametersRWTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/FilterParametersRWTest");
    const std::string OutputFile("@TEST_TEMP_DIR@/FilterParametersRWTest/Output.h5");
    const std::string TestFile_1("@TEST_TEMP_DIR@/FilterParametersRWTest/TestFile_1.h5");
    const std::string TestFile_2("@TEST_TEMP_DIR@/FilterParametersRWTest/TestFile_2.h5");
    const std::string TestFile_3("@TEST_TEMP_DIR@/FilterParametersRWTest/TestFile_3.h5");
  }

  namespace PFTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/PoleFigureTest/");
  }

  namespace AngleFileLoaderTest
  {
    const std::string TestDir("@TEST_TEMP_DIR@/AngleFileLoaderTest");
    const std::string OutputFile("@TEST_TEMP_DIR@/AngleFileLoaderTest/AngleTestFile.txt");
  }

  namespace LambertRWTest
  {
    const std::string TestFile("@TEST_TEMP_DIR@/LambertRWTest.h5");
  }
}

// -----------------------------------------------------------------------------
//  Define the temp directory for this system
// -----------------------------------------------------------------------------
//#define TEST_TEMP_DIR "@TEST_TEMP_DIR@/"
namespace MXAUnitTest
{
  const std::string MXATempDir("@TEST_TEMP_DIR@/");
  const std::string MXATestBinaryDirectory("@DREAM3DProj_BIN_DIR_NATIVE@");
  const std::string MXABuildDir("@DREAM3DProj_BUILD_DIR_NATIVE@");

#if defined (WIN32)
  static const char DirSeparator = '\\';
#else
  static const char DirSeparator = '/';
#endif

  namespace SupportFileTest
  {
    const std::string OutputFile("@TEST_TEMP_DIR@/SupportFileTest.h5");
    const std::string BinaryInputFile("@TEST_TEMP_DIR@/SupportFileTest_Input.bin");
    const std::string TextInputFile("@DATAIMPORT_TEST_IMPORT_XML_FILE@");
  }

  namespace MXAFileReaderWriterTest
  {
    const std::string OutputFile("@TEST_TEMP_DIR@/MXAFileReaderWriter.bin");
  }

  namespace MXAFileSystemPathTest
  {
    const std::string OutputFile("@TEST_TEMP_DIR@/MXAFileSystemPath.bin");
    const std::string OutputFileName("MXAFileSystemPath.bin");
    const std::string TestDirName1("Directory1");
    const std::string TestDirName2("Directory2");
    const std::string TestDir("MXAFileSystemPathTest");
    const std::string Extension("bin");
  }

  namespace DataImportTest
  {
    const std::string TestDir("DataImportTest");
    const std::string H5TiffOutputFile("@DATAIMPORT_TEST_XMLH5TIFF_OUTPUT_FILE@");
    const std::string ImportXMLFile("@DATAIMPORT_TEST_IMPORT_XML_FILE@");
    const std::string SimpleImport("@TEST_TEMP_DIR@/DataImportTestSimpleFile.h5");
  }

  // -----------------------------------------------------------------------------
  //  Define where to put our temporary files for the DataModel Test
  // -----------------------------------------------------------------------------
  namespace DataModelTest
  {
    const std::string TestDir("DataModelTest");
    const std::string BeforeH5File("@TEST_TEMP_DIR@/DataModelTest-Before.h5");
    const std::string AfterH5File("@TEST_TEMP_DIR@/DataModelTest-After.h5");
    const std::string OverwriteH5File("@TEST_TEMP_DIR@/DataModelOverWrite_Test.h5");
  }

}
#endif
