# -----------------------------------------------------------------------------------
# This file was auto generated from the template file "CompleteBundle.cmake.in", if you
# need to make changes edit the template file NOT this one. Your changes will be
# lost the next time CMake is run. You have been warned.
#   This file is called from CMake's installation generated scripts. It is added
# via a CMake call
#   install(SCRIPT "${OSX_MAKE_STANDALONE_BUNDLE_CMAKE_SCRIPT}")
# which can be sometime found in the macro 'MakeOSXBundleApp' which is sometimes located
# in the file OSX_BundleTools.cmake
# -----------------------------------------------------------------------------------

message (STATUS "#------------ Starting OS X App Bundle Fixup --------------------------")

include (CMakeParseArguments)

#-- Need this for link line stuff?
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0009 NEW)
  cmake_policy(SET CMP0011 NEW)
endif(COMMAND cmake_policy)


# gp_item_default_embedded_path item default_embedded_path_var
#
# Return the path that others should refer to the item by when the item
# is embedded inside a bundle.
#
# Override on a per-project basis by providing a project-specific
# gp_item_default_embedded_path_override function.
#
function(gp_item_default_embedded_path_override item default_embedded_path_var)
  #
  # The assumption here is that all executables in the bundle will be
  # in same-level-directories inside the bundle. The parent directory
  # of an executable inside the bundle should be MacOS or a sibling of
  # MacOS and all embedded paths returned from here will begin with
  # "@executable_path/../" and will work from all executables in all
  # such same-level-directories inside the bundle.
  #

  # By default, embed things right next to the main bundle executable:
  #
  set(path "@executable_path/../../Contents/MacOS")
  #message(STATUS "%%%=> item: ${item}")
  #message(STATUS "%%%=> default_embedded_path_var: ${default_embedded_path_var}")

  set(overridden 0)
  # For Qt Based Plugins for the image formats, the Plugins MUST reside in
  # the "PlugIns/imageformats" directory. Since THIS particular project ONLY has
  # the Qt Frameworks AND the Plugins the below regex will suffice to separate
  # them from each other. On other projects we could use better logic to
  # put things where they go. Maybe using some "configured" CMake List of libraries
  # then looking through each list for the currect library being fixed up.
  #

  # First look for Plugins that have a ".plugin" extension
  if(item MATCHES "\\.plugin$")
    message(STATUS "Just a Plugin: ${item}")
    set(path "@executable_path/../Plugins")
    set(overridden 1)
  endif(item MATCHES "\\.plugin$")

  # Next look for the Qt Image Format Plugins in case those are needed
  if ( item MATCHES "imageformats/libq?")
    message(STATUS "^^^^^^==> Qt Image Format Plugin Found: ${item}")
    set(path "@executable_path/../Plugins/imageformats")
    set(overridden 1)
  # Lastly pick up any Plugins that simply have the ".dylib" extension
  elseif(item MATCHES "\\.dylib$")
    message(STATUS "%%%%%==> Other Library Found: ${item}")
    set(path "@executable_path/../lib")
    set(overridden 1)
  endif()

  # Embed frameworks in the embedded "Frameworks" directory (sibling of MacOS):
  #
  if(NOT overridden)
    if(item MATCHES "[^/]+\\.framework/")
      set(path "@executable_path/../Frameworks")
      set(overridden 1)
    endif(item MATCHES "[^/]+\\.framework/")
  endif(NOT overridden)

  set(${default_embedded_path_var} "${path}" PARENT_SCOPE)
endfunction()

# -- Create the Internal Symlinks to the Frameworks, lib and Plugin Directories
# so that all the frameworks, plugins and libraries can be shared among the
# applications on OS X.
if(NOT EXISTS ${CMAKE_INSTALL_PREFIX}/Frameworks)
  execute_process(COMMAND mkdir "${CMAKE_INSTALL_PREFIX}/Frameworks" )
endif()
if(NOT EXISTS ${CMAKE_INSTALL_PREFIX}/Plugins)
  execute_process(COMMAND mkdir "${CMAKE_INSTALL_PREFIX}/Plugins" )
endif()
if(NOT EXISTS ${CMAKE_INSTALL_PREFIX}/lib)
  execute_process(COMMAND mkdir "${CMAKE_INSTALL_PREFIX}/lib" )
endif()

execute_process(
  COMMAND ln -s ../../Frameworks Frameworks
  COMMAND ln -s ../../Plugins Plugins
  COMMAND ln -s ../../lib lib
  WORKING_DIRECTORY "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/"
  )

# -- These are DREAM3D Plugins that need to be installed
file(READ "@QAB_PLUGIN_LIST_FILE@" DREAM3D_PLUGINS)
set(d3d_Plugins "")
# -- Loop on each DREAM3D Plugin to make it is fixed up
foreach(plugin ${DREAM3D_PLUGINS})
  message(STATUS "Copying DREAM3D Plugin ${plugin} into ${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Plugins")
  file(COPY ${plugin} DESTINATION "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Plugins")
  get_filename_component(d3d_plugin_name "${plugin}" NAME)
  set(d3d_Plugins "${d3d_Plugins};${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Plugins/${d3d_plugin_name}")
endforeach(plugin $DREAM3D_PLUGINS)


#-- We are going to use the same logic from the Qt5 'macdeployqt' utility to grab required Qt5 Plugins
function(CopyQt5Plugin)
  set(options )
  set(oneValueArgs QT5_PLUGIN_DIR PLUGIN_GROUP PLUGIN_NAME)
  set(multiValueArgs )
  cmake_parse_arguments(P "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN} )

  set(ORIG_PLUGIN "${P_QT5_PLUGIN_DIR}/${P_PLUGIN_GROUP}/${P_PLUGIN_NAME}")
  message(STATUS "Copying Qt Plugin ${P_QT5_PLUGIN_DIR}/${P_PLUGIN_GROUP}/${P_PLUGIN_NAME} into ${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Plugins/${P_PLUGIN_GROUP}/")
  file(COPY "${ORIG_PLUGIN}" DESTINATION "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Plugins/${P_PLUGIN_GROUP}")
  set(d3d_qt_Plugins "${d3d_qt_Plugins};${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Plugins/${P_PLUGIN_GROUP}/${P_PLUGIN_NAME}" PARENT_SCOPE)
endfunction()

# This is our list of Plugins to install
set(d3d_qt_Plugins "")
# First get the path to the Qt5 Plugins directory
execute_process(
  COMMAND "@QtQMake_location@" -query QT_INSTALL_PLUGINS
  OUTPUT_VARIABLE qtPluginsPath
  OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_STRIP_TRAILING_WHITESPACE
)

# This gets populated from the 'configure_file' stage of cmake
set(Qt5_MODULES "@QAB_QT5_MODULES@")

# If we link against Qt5Gui then we need this plugin on OS X
list(FIND Qt5_MODULES "Gui" moduleFound)
if(moduleFound GREATER -1)
  CopyQt5Plugin(QT5_PLUGIN_DIR "${qtPluginsPath}" PLUGIN_GROUP "platforms" PLUGIN_NAME "libqcocoa.dylib")
  CopyQt5Plugin(QT5_PLUGIN_DIR "${qtPluginsPath}" PLUGIN_GROUP "printsupport" PLUGIN_NAME "libcocoaprintersupport.dylib")
  CopyQt5Plugin(QT5_PLUGIN_DIR "${qtPluginsPath}" PLUGIN_GROUP "bearer" PLUGIN_NAME "libqcorewlanbearer.dylib")
  CopyQt5Plugin(QT5_PLUGIN_DIR "${qtPluginsPath}" PLUGIN_GROUP "bearer" PLUGIN_NAME "libqgenericbearer.dylib")
endif()


# We are going to grab ALL the image Plugins
file(GLOB imagePlugins "${qtPluginsPath}/imageformats/*.dylib")
# Now loop over each ImageFormat plugin copying it into the app bundle ONLY if it is NOT the debug version
foreach(imagePlugin ${imagePlugins})
  string(FIND "${imagePlugin}" "_debug" FOUND)
  if(FOUND EQUAL -1)
    # This is a non _debug version of the dylib and we want it included in our package
    get_filename_component(imagePlugin "${imagePlugin}" NAME)
    CopyQt5Plugin(QT5_PLUGIN_DIR "${qtPluginsPath}" PLUGIN_GROUP "imageformats" PLUGIN_NAME ${imagePlugin})
  endif()
endforeach()


# ----------------------------------------------------
# This is where the actual patching of the install_names is going to take place.
include(BundleUtilities)
fixup_bundle("${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app"
             # Plugins to Install
             "${d3d_Plugins};${d3d_qt_Plugins}"
             # Directories to Search for Libraries
             "@lib_search_dirs@")


# ----------------------------------------------------
# Create a qt.conf file in the app bundle
file(WRITE "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Resources/qt.conf")
file(APPEND "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Resources/qt.conf" "[Paths]\nPlugins = Plugins\n")
FILE(APPEND "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Resources/qt.conf" "Prefix = .\n")
FILE(APPEND "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Resources/qt.conf" "LibraryExecutables = bin\n")

# ----------------------------------------------------
# Copy the QtWebEngine parts of the QtWebEngineCore Framework
if ("@DREAM3D_USE_QtWebEngine@" STREQUAL "ON")
  # We need the location of QMake for later on in order to find the plugins directory


  FILE(COPY "@QM_QT_INSTALL_PREFIX@/lib/QtWebEngineCore.framework/Versions/5/Helpers"
        DESTINATION "${CMAKE_INSTALL_PREFIX}/Frameworks/QtWebEngineCore.framework/Versions/5/")
  FILE(COPY "@QM_QT_INSTALL_PREFIX@/lib/QtWebEngineCore.framework/Helpers"
        DESTINATION "${CMAKE_INSTALL_PREFIX}/Frameworks/QtWebEngineCore.framework/")
  if(NOT EXISTS "${CMAKE_INSTALL_PREFIX}/Frameworks/QtWebEngineCore.framework/Helpers/QtWebEngineProcess.app/Contents/Frameworks")
    execute_process( COMMAND ln -s "${CMAKE_INSTALL_PREFIX}/Frameworks" "${CMAKE_INSTALL_PREFIX}/Frameworks/QtWebEngineCore.framework/Helpers/QtWebEngineProcess.app/Contents/Frameworks"
                                WORKING_DIRECTORY "${CMAKE_INSTALL_PREFIX}" )
  endif()
endif()
