# -----------------------------------------------------------------------------------
# This file was auto generated from the template file "CompleteBundle.cmake.in", if you 
# need to make changes edit the template file NOT this one. Your changes will be 
# lost the next time CMake is run. You have been warned.
#   This file is called from CMake's installation generated scripts. It is added
# via a CMake call 
#   install(SCRIPT "${OSX_MAKE_STANDALONE_BUNDLE_CMAKE_SCRIPT}")
# which can be sometime found in the macro 'MakeOSXBundleApp' which is sometimes located
# in the file OSX_BundleTools.cmake
# -----------------------------------------------------------------------------------

message (STATUS "#------------ Starting OS X Bundle Fixup --------------------------")
cmake_minimum_required(VERSION 2.8)

#-- Need this for link line stuff?
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0009 NEW)
endif(COMMAND cmake_policy)


if (${CMAKE_VERSION} VERSION_GREATER 2.6.2)
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0011 NEW)
endif(COMMAND cmake_policy)
endif()

# gp_item_default_embedded_path item default_embedded_path_var
#
# Return the path that others should refer to the item by when the item
# is embedded inside a bundle.
#
# Override on a per-project basis by providing a project-specific
# gp_item_default_embedded_path_override function.
#
function(gp_item_default_embedded_path_override item default_embedded_path_var)
  #
  # The assumption here is that all executables in the bundle will be
  # in same-level-directories inside the bundle. The parent directory
  # of an executable inside the bundle should be MacOS or a sibling of
  # MacOS and all embedded paths returned from here will begin with
  # "@executable_path/../" and will work from all executables in all
  # such same-level-directories inside the bundle.
  #

  # By default, embed things right next to the main bundle executable:
  #
  set(path "@executable_path/../../Contents/MacOS")
  #message(STATUS "%%%=> item: ${item}")
  #message(STATUS "%%%=> default_embedded_path_var: ${default_embedded_path_var}")

  set(overridden 0)
  # For Qt Based Plugins for the image formats, the plugins MUST reside in
  # the "PlugIns/imageformats" directory. Since THIS particular project ONLY has
  # the Qt Frameworks AND the plugins the below regex will suffice to separate
  # them from each other. On other projects we could use better logic to
  # put things where they go. Maybe using some "configured" CMake List of libraries
  # then looking through each list for the currect library being fixed up.
  # Embed .dylibs right next to the main bundle executable:
  #
  
  # First look for plugins that have a ".plugin" extension
  if(item MATCHES "\\.plugin$")
    #message(STATUS "Just a Plugin")
    set(path "@executable_path/../plugins")
    set(overridden 1)
  endif(item MATCHES "\\.plugin$")
  
  # Next look for the Qt Image Format Plugins in case those are needed
  if ( item MATCHES "imageformats/libq?")
    #message(STATUS "^^^^^^==> Qt Image Format Plugin Found")
    set(path "@executable_path/../plugins/imageformats")
    set(overridden 1)
  # Lastly pick up any plugins that simply have the ".dylib" extension
  elseif(item MATCHES "\\.dylib$")
    set(path "@executable_path/../lib")
    set(overridden 1)
  endif()
  
  # Embed frameworks in the embedded "Frameworks" directory (sibling of MacOS):
  #
  if(NOT overridden)
    if(item MATCHES "[^/]+\\.framework/")
      set(path "@executable_path/../Frameworks")
      set(overridden 1)
    endif(item MATCHES "[^/]+\\.framework/")
  endif(NOT overridden)

  set(${default_embedded_path_var} "${path}" PARENT_SCOPE)
endfunction()

# -- Run the BundleUtilities cmake code
# -- These are DREAM3D Plugins
file(READ "@QAB_PLUGIN_LIST_FILE@" DREAM3D_PLUGINS)
set(d3d_plugins "")
# -- Loop on each DREAM3D Plugin to make it is fixed up
foreach(plugin ${DREAM3D_PLUGINS})
  message(STATUS "Copying file ${plugin} into ${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Plugins")
  file(COPY ${plugin} DESTINATION "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Plugins")
  get_filename_component(d3d_plugin_name "${plugin}" NAME)
  set(d3d_plugins "${d3d_plugins};${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Plugins/${d3d_plugin_name}")
endforeach(plugin $DREAM3D_PLUGINS)
 
# -- These are actual Qt ImageFormat Plugins
file(READ "@DREAM3DProj_BINARY_DIR@/Qt_Plugins.txt" DREAM3D_QT_PLUGINS)
set(d3d_qt_plugins "")
foreach(plugin ${DREAM3D_QT_PLUGINS})
  message(STATUS "Copying file ${plugin} into ${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/plugins/imageformats/")
  file(COPY ${plugin} DESTINATION "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/plugins/imageformats")
  get_filename_component(d3d_plugin_name "${plugin}" NAME)
  set(d3d_qt_plugins "${d3d_qt_plugins};${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/plugins/imageformats/${d3d_plugin_name}")
endforeach(plugin $DREAM3D_QT_PLUGINS)

include(BundleUtilities)
fixup_bundle("${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app" 
             # Plugins to Install
             "${d3d_plugins};${d3d_qt_plugins}"
             # Directories to Search for Libraries
             "@lib_search_dirs@")

file(WRITE "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Resources/qt.conf")
if("@write_qt_plugins_in_qtconf@" STREQUAL "1")
  file(APPEND "${CMAKE_INSTALL_PREFIX}/@osx_app_name@.app/Contents/Resources/qt.conf" "[Paths]\nPlugins = plugins\n")
endif()
file(MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/Frameworks")
file(MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib")

# Now we need to fix up the package to have a shared Frameworks and lib directory
list(APPEND @osx_app_name@archs "@CMAKE_OSX_ARCHITECTURES@" )
list(LENGTH @osx_app_name@archs @osx_app_name@archLength )
message(STATUS "@osx_app_name@archLength: ${@osx_app_name@archLength}")
if (@osx_app_name@archLength EQUAL 1 OR @osx_app_name@archLength EQUAL 0)    
    # Move the frameworks from the contents of the .app bundle out to top level of the install directory
    execute_process(COMMAND /bin/bash @OPTIMIZE_BUNDLE_SHELL_SCRIPT@ ${CMAKE_INSTALL_PREFIX})
endif()

