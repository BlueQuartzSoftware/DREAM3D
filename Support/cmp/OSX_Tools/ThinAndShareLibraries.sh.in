#!/bin/bash
# This script requires a single argument which is the current install path

DEBUG=0
# -----------------------------------------------------------------------------
#  Conditional Printing
# -----------------------------------------------------------------------------
function printStatus()
{
	if [ "x$DEBUG" = "x1" ]; then
	    echo "${1}" 
	fi	
}



InstallPrefix="${1}"
printStatus "InstallPrefix = ${InstallPrefix}"
ProjectBinaryDir=@PROJECT_INSTALL_DIR@
printStatus "ProjectBinaryDir = ${ProjectBinaryDir}"

# ProjectBinaryDir="${InstallPrefix}/@osx_app_name@.app"
OSX_App_Name="@osx_app_name@"
OSX_App="@CMAKE_RUNTIME_OUTPUT_DIRECTORY@/@osx_app_name@.app"
arch=@CMAKE_OSX_ARCHITECTURES@
logFile=/tmp/ThinAndShareLibraries.log

echo "Starting Fix up of application @osx_app_name@.app to share the frameworks and thin to a single arch" 


# -----------------------------------------------------------------------------
# Frameworks
# -----------------------------------------------------------------------------
# Create the shared frameworks directory
mkdir -p ${InstallPrefix}/Frameworks
cd ${InstallPrefix}/${ProjectBinaryDir}/Contents/Frameworks
frameworks=`find . -type d -name "*.framework"`
for f in ${frameworks}
do
  cd ${InstallPrefix}/${ProjectBinaryDir}/Contents/Frameworks
  # Get the base name of the framework
  base=`basename -s .framework $f`
  # Find the actual compiled file that is buried deep in the .framework directory (Versions/4/*)
  file=`find . -type f -name "$base"`
  # if the framework directory does NOT exist in the external location then move the entire directory there
  if [ ! -d "${InstallPrefix}/Frameworks/$f" ]; then
    printStatus "Moving $f to external shared frameworks directory"
    cp -r $f ${InstallPrefix}/Frameworks/$f/
  fi
  
  # Remove the actual compiled framework file but leave the directory structure in tact.
  printStatus "rm -rf ${InstallPrefix}/${ProjectBinaryDir}/Contents/Frameworks/$file"
  rm -rf "${InstallPrefix}/${ProjectBinaryDir}/Contents/Frameworks/$file"

  printStatus "Creating Symlink to external Shared Frameworks directory for $base"
  printStatus "file = $file"

  # now create a softlink to the real framework file that was move to the external shared location
  printStatus "ln -s ../../Frameworks/$file $file"
  ln -s ../../../../../../Frameworks/$file $file

  printStatus "Thinning Framework $f to arch $arch"
  cd ${InstallPrefix}/Frameworks
  printStatus "lipo $file -thin $arch -output $file  > ${logFile} 2> ${logFile}"
  lipo $file -thin $arch -output $file  > ${logFile} 2> ${logFile}
  
done

# -----------------------------------------------------------------------------
# Plugins
# -----------------------------------------------------------------------------
mkdir -p ${InstallPrefix}/Plugins
cd ${InstallPrefix}/${ProjectBinaryDir}/Contents/Plugins
plugins=`find . -type f -name "*.plugin"`
for p in ${plugins}
do
  # Move the plugin out into the top level plugin directory (over writing anything that is outp there)
  # Get the directory (for embedded Qt Plugins like ImageFormats)
  dir=`dirname ${p}`
  # Create that directory structure up in the top level
  mkdir -p ${InstallPrefix}/Plugins/${dir}
  # Move the plugin file out into the top level
  mv ${p} ${InstallPrefix}/Plugins/${dir}/
done

# Now move all the Qt style plugins which have a file extension of .dylib
plugins=`find . -type f -name "*.dylib"`
for p in ${plugins}
do
  # Move the plugin out into the top level plugin directory (over writing anything that is outp there)
  # Get the directory (for embedded Qt Plugins like ImageFormats)
  dir=`dirname ${p}`
  # Create that directory structure up in the top level
  mkdir -p ${InstallPrefix}/Plugins/${dir}
  # Move the plugin file out into the top level
  mv ${p} ${InstallPrefix}/Plugins/${dir}/
done

# All the plugins should be out of the directory, move up one directory and create a symlink
cd ../
rm -rf Plugins
ln -s ../../Plugins Plugins

# remove the actual frameworks directory and create a symlink to the external Frameworks directory
cd "${InstallPrefix}"


# -----------------------------------------------------------------------------
# Dylibs
# -----------------------------------------------------------------------------
# Now create the 'lib' shared directory
mkdir -p ${InstallPrefix}/lib
if [ -d  ${InstallPrefix}/${ProjectBinaryDir}/Contents/lib ]; then
  
  cd ${InstallPrefix}/${ProjectBinaryDir}/Contents/lib
  frameworks=`find . -type f -name "*.dylib"`
  for f in ${frameworks}
  do
    cd ${InstallPrefix}/${ProjectBinaryDir}/Contents/lib
    if [ ! -f ${InstallPrefix}/lib/$f ]; then
      printStatus "Moving $f to external shared lib directory"
      mv $f ${InstallPrefix}/lib/.
    else
      rm $f
    fi

    printStatus "Creating Symlink to external Shared lib directory for $f"
    ln -s ../../../lib/$f .
  
    printStatus "Thinning dylib to arch $arch"
  
    lipo ${InstallPrefix}/lib/$f -thin $arch -output ${InstallPrefix}/lib/$f > ${logFile} 2> ${logFile}
  done

fi
# remove the actual frameworks direction and create a symlink to the external Frameworks directory
cd "${InstallPrefix}"


# rm ${logFile}
