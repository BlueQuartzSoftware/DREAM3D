/*--------------------------------------------------------------------------
 * This file is autogenerated from 
 * @CMP_SOURCE_DIR@/ConfiguredFiles/cmpConfiguration.h.in 
 * during the cmake configuration of your project. If you need to make changes
 * edit the original file NOT THIS FILE.
 * --------------------------------------------------------------------------*/
#ifndef _@CMP_CONFIGURATION_HEADER_GUARD@_H_
#define _@CMP_CONFIGURATION_HEADER_GUARD@_H_


/* Define if you are running on a Microsoft Windows Platform */
#ifndef CMP_HAVE_WINDOWS
#cmakedefine CMP_HAVE_WINDOWS @CMP_HAVE_WINDOWS@
#endif

#ifndef CMP_HAVE_WINSOCK_H
/* Define if your system has the <winsock.h> header file */
#cmakedefine CMP_HAVE_WINSOCK_H @CMP_HAVE_WINSOCK_H@
#endif

#ifndef CMP_NEED_SOCKETS
/* Define if you need to use sockets */
#cmakedefine CMP_NEED_SOCKETS @CMP_NEED_SOCKETS@
#endif

#ifndef CMP_HAVE_STDDEF_H
/* Define to 1 if you have the <stddef.h> header file. */
#cmakedefine CMP_HAVE_STDDEF_H @CMP_HAVE_STDDEF_H@
#endif

#ifndef CMP_HAVE_STDINT_H
/* Define to 1 if you have the <stdint.h> header file. */
#cmakedefine CMP_HAVE_STDINT_H @CMP_HAVE_STDINT_H@
#endif

#ifndef CMP_HAVE_STDLIB_H
/* Define to 1 if you have the <stdlib.h> header file. */
#cmakedefine CMP_HAVE_STDLIB_H @CMP_HAVE_STDLIB_H@
#endif

#ifndef CMP_HAVE_SETJMP_H
/* Define to 1 if you have the <setjmp.h> header file. */
#cmakedefine CMP_HAVE_SETJMP_H @CMP_HAVE_SETJMP_H@
#endif

#ifndef CMP_HAVE_STRING_H
/* Define to 1 if you have the <string.h> header file. */
#cmakedefine CMP_HAVE_STRING_H @CMP_HAVE_STRING_H@
#endif

#ifndef CMP_HAVE_STDIO_H
/* Define to 1 if you have the <stdio.h> header file.  */
#cmakedefine CMP_HAVE_STDIO_H @CMP_HAVE_STDIO_H@
#endif

#ifndef CMP_HAVE_MATH_H
/* Define to 1 if you have the <math.h> header file.  */
#cmakedefine CMP_HAVE_MATH_H @CMP_HAVE_MATH_H@
#endif

#ifndef CMP_HAVE_TIME_H
/* Define to 1 if you have the <time.h> header file. */
#cmakedefine CMP_HAVE_TIME_H @CMP_HAVE_TIME_H@
#endif

#ifndef CMP_HAVE_SYS_TIME_H
/* Define to 1 if you have the <sys/time.h> header file. */
#cmakedefine CMP_HAVE_SYS_TIME_H @CMP_HAVE_SYS_TIME_H@
#endif

#ifndef CMP_HAVE_TIME_GETTIMEOFDAY
/* Do we have the "gettimeofday" function */
#cmakedefine CMP_HAVE_TIME_GETTIMEOFDAY @CMP_HAVE_TIME_GETTIMEOFDAY@
#endif

#ifndef CMP_HAVE_SYS_TIME_GETTIMEOFDAY
/* Do we the the sys/time.h getttimeofday function */
#cmakedefine CMP_HAVE_SYS_TIME_GETTIMEOFDAY @CMP_HAVE_SYS_TIME_GETTIMEOFDAY@
#endif

#ifndef CMP_HAVE_SYS_TYPES_H
/* Define to 1 if you have the <sys/types.h> header file. */
#cmakedefine CMP_HAVE_SYS_TYPES_H @CMP_HAVE_SYS_TYPES_H@
#endif

#ifndef CMP_HAVE_SYS_SOCKET_H
/* Define to 1 if you have the <sys/socket.h> header file. */
#cmakedefine CMP_HAVE_SYS_SOCKET_H @CMP_HAVE_SYS_SOCKET_H@
#endif

#ifndef CMP_HAVE_NETINET_IN_H
/* Define to 1 if you have the <netinet/in.h> header file. */
#cmakedefine CMP_HAVE_NETINET_IN_H @CMP_HAVE_NETINET_IN_H@
#endif

#ifndef CMP_HAVE_ARPA_INET_H
/* Define to 1 if you have the <arpa/inet.h> header file. */
#cmakedefine CMP_HAVE_ARPA_INET_H @CMP_HAVE_ARPA_INET_H@
#endif

#ifndef CMP_HAVE_UNISTD_H
/* Define to 1 if you have the <unistd.h> header file. */
#cmakedefine CMP_HAVE_UNISTD_H @CMP_HAVE_UNISTD_H@
#endif

#ifndef CMP_HAVE_FCNTL_H
/* Define to 1 if you have the <fcntl.h> header file. */
#cmakedefine CMP_HAVE_FCNTL_H @CMP_HAVE_FCNTL_H@
#endif

#ifndef CMP_HAVE_ERRNO_H
/* Define to 1 if you have the <errno.h> header file. */
#cmakedefine CMP_HAVE_ERRNO_H @CMP_HAVE_ERRNO_H@
#endif

#ifndef CMP_TYPE_CHAR_IS_SIGNED
/* Define to 1 if the 'char' type is signed. */
#cmakedefine CMP_TYPE_CHAR_IS_SIGNED @CMP_TYPE_CHAR_IS_SIGNED@
#endif

#ifndef CMP_SIZEOF_CHAR
/* The size of `char', as computed by sizeof. */
#define CMP_SIZEOF_CHAR @CMP_SIZEOF_CHAR@
#endif

#ifndef CMP_SIZEOF_SHORT
/* The size of `short', as computed by sizeof. */
#define CMP_SIZEOF_SHORT @CMP_SIZEOF_SHORT@
#endif

#ifndef CMP_SIZEOF_INT
/* The size of `int', as computed by sizeof. */
#define CMP_SIZEOF_INT @CMP_SIZEOF_INT@
#endif

#ifndef CMP_SIZEOF_DOUBLE
/* The size of `double', as computed by sizeof. */
#define CMP_SIZEOF_DOUBLE @CMP_SIZEOF_DOUBLE@
#endif

#ifndef CMP_SIZEOF_FLOAT
/* The size of `float', as computed by sizeof. */
#define CMP_SIZEOF_FLOAT @CMP_SIZEOF_FLOAT@
#endif

#ifndef CMP_SIZEOF_INT8_T
/* The size of `int8_t', as computed by sizeof. */
#define CMP_SIZEOF_INT8_T @CMP_SIZEOF_INT8_T@
#endif

#ifdef CMP_SIZEOF_INT16_T
/* The size of `int16_t', as computed by sizeof. */
#define CMP_SIZEOF_INT16_T @CMP_SIZEOF_INT16_T@
#endif

#ifndef CMP_SIZEOF_INT32_T
/* The size of `int32_t', as computed by sizeof. */
#define CMP_SIZEOF_INT32_T @CMP_SIZEOF_INT32_T@
#endif

#ifndef CMP_SIZEOF_INT64_T
/* The size of `int64_t', as computed by sizeof. */
#define CMP_SIZEOF_INT64_T @CMP_SIZEOF_INT64_T@
#endif

#ifndef CMP_SIZEOF_INT_FAST16_T
/* The size of `int_fast16_t', as computed by sizeof. */
#define CMP_SIZEOF_INT_FAST16_T @CMP_SIZEOF_INT_FAST16_T@
#endif

#ifndef CMP_SIZEOF_INT_FAST32_T
/* The size of `int_fast32_t', as computed by sizeof. */
#define CMP_SIZEOF_INT_FAST32_T @CMP_SIZEOF_INT_FAST32_T@
#endif

#ifndef CMP_SIZEOF_INT_FAST64_T
/* The size of `int_fast64_t', as computed by sizeof. */
#define CMP_SIZEOF_INT_FAST64_T @CMP_SIZEOF_INT_FAST64_T@
#endif

#ifndef CMP_SIZEOF_INT_FAST8_T
/* The size of `int_fast8_t', as computed by sizeof. */
#define CMP_SIZEOF_INT_FAST8_T @CMP_SIZEOF_INT_FAST8_T@
#endif

#ifndef CMP_SIZEOF_INT_LEAST16_T
/* The size of `int_least16_t', as computed by sizeof. */
#define CMP_SIZEOF_INT_LEAST16_T @CMP_SIZEOF_INT_LEAST16_T@
#endif

#ifndef CMP_SIZEOF_INT_LEAST32_T
/* The size of `int_least32_t', as computed by sizeof. */
#define CMP_SIZEOF_INT_LEAST32_T @CMP_SIZEOF_INT_LEAST32_T@
#endif

#ifndef CMP_SIZEOF_INT_LEAST64_T
/* The size of `int_least64_t', as computed by sizeof. */
#define CMP_SIZEOF_INT_LEAST64_T @CMP_SIZEOF_INT_LEAST64_T@
#endif

#ifndef CMP_SIZEOF_INT_LEAST8_T
/* The size of `int_least8_t', as computed by sizeof. */
#define CMP_SIZEOF_INT_LEAST8_T @CMP_SIZEOF_INT_LEAST8_T@
#endif


#if !defined(__APPLE__)
#ifndef CMP_SIZEOF_SIZE_T
/* The size of `size_t', as computed by sizeof. */
#define CMP_SIZEOF_SIZE_T @CMP_SIZEOF_SIZE_T@
#endif

#ifndef CMP_SIZEOF_SSIZE_T
/* The size of `ssize_t', as computed by sizeof. */
#define CMP_SIZEOF_SSIZE_T @CMP_SIZEOF_SSIZE_T@
#endif

#ifndef CMP_SIZEOF_LONG
/* The size of `long', as computed by sizeof. */
#define CMP_SIZEOF_LONG @CMP_SIZEOF_LONG@
#endif

#else
   # if defined(__LP64__) && __LP64__
#ifndef CMP_SIZEOF_LONG
  #define CMP_SIZEOF_LONG 8
#endif
#ifndef CMP_SIZEOF_SIZE_T
  #define CMP_SIZEOF_SIZE_T 8
#endif
#ifndef CMP_SIZEOF_SSIZE_T
  #define CMP_SIZEOF_SSIZE_T 8
#endif
  # else
#ifndef CMP_SIZEOF_LONG
  #define CMP_SIZEOF_LONG 4
#endif
#ifndef CMP_SIZEOF_SIZE_T
  #define CMP_SIZEOF_SIZE_T 4
#endif
#ifndef CMP_SIZEOF_SSIZE_T
  #define CMP_SIZEOF_SSIZE_T 4
#endif
  # endif

#endif

#ifndef CMP_SIZEOF_LONG_DOUBLE
/* The size of `long double', as computed by sizeof. */
#define CMP_SIZEOF_LONG_DOUBLE @CMP_SIZEOF_LONG_DOUBLE@
#endif

#ifndef CMP_SIZEOF_LONG_LONG
/* Define size of long long and/or __int64 bit integer type only if the type
   exists.  */
#if !defined(__APPLE__)
 #define CMP_SIZEOF_LONG_LONG @CMP_SIZEOF_LONG_LONG@
#else
 #define CMP_SIZEOF_LONG_LONG 8
#endif
#endif

#ifndef CMP_SIZEOF_OFF64_T
/* The size of `off64_t', as computed by sizeof. */
#define CMP_SIZEOF_OFF64_T @CMP_SIZEOF_OFF64_T@
#endif

#ifndef CMP_SIZEOF_OFF_T
/* The size of `off_t', as computed by sizeof. */
#define CMP_SIZEOF_OFF_T @CMP_SIZEOF_OFF_T@
#endif

#ifndef CMP_SIZEOF_UINT16_T
/* The size of `uint16_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT16_T @CMP_SIZEOF_UINT16_T@
#endif

#ifndef CMP_SIZEOF_UINT32_T
/* The size of `uint32_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT32_T @CMP_SIZEOF_UINT32_T@
#endif

#ifndef CMP_SIZEOF_UINT64_T
/* The size of `uint64_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT64_T @CMP_SIZEOF_UINT64_T@
#endif

#ifndef CMP_SIZEOF_UINT8_T
/* The size of `uint8_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT8_T @CMP_SIZEOF_UINT8_T@
#endif

#ifndef CMP_SIZEOF_UINT_FAST16_T
/* The size of `uint_fast16_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT_FAST16_T @CMP_SIZEOF_UINT_FAST16_T@
#endif

#ifndef CMP_SIZEOF_UINT_FAST32_T
/* The size of `uint_fast32_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT_FAST32_T @CMP_SIZEOF_UINT_FAST32_T@
#endif

#ifndef CMP_SIZEOF_UINT_FAST64_T
/* The size of `uint_fast64_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT_FAST64_T @CMP_SIZEOF_UINT_FAST64_T@
#endif

#ifndef CMP_SIZEOF_UINT_FAST8_T
/* The size of `uint_fast8_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT_FAST8_T @CMP_SIZEOF_UINT_FAST8_T@
#endif

#ifndef CMP_SIZEOF_UINT_LEAST16_T
/* The size of `uint_least16_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT_LEAST16_T @CMP_SIZEOF_UINT_LEAST16_T@
#endif

#ifndef CMP_SIZEOF_UINT_LEAST32_T
/* The size of `uint_least32_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT_LEAST32_T @CMP_SIZEOF_UINT_LEAST32_T@
#endif

#ifndef CMP_SIZEOF_UINT_LEAST64_T
/* The size of `uint_least64_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT_LEAST64_T @CMP_SIZEOF_UINT_LEAST64_T@
#endif

#ifndef CMP_SIZEOF_UINT_LEAST8_T
/* The size of `uint_least8_t', as computed by sizeof. */
#define CMP_SIZEOF_UINT_LEAST8_T @CMP_SIZEOF_UINT_LEAST8_T@
#endif

#ifndef CMP_SIZEOF_UNSIGNED
/* The size of `unsigned', as computed by sizeof. */
#define CMP_SIZEOF_UNSIGNED @CMP_SIZEOF_UNSIGNED@
#endif

#ifndef CMP_SIZEOF___INT64
/* The size of `__int64', as computed by sizeof. */
#define CMP_SIZEOF___INT64 @CMP_SIZEOF___INT64@
#endif

#ifndef CMP_TYPE_USE_LONG_LONG
/* Can we use long long safely */
#cmakedefine CMP_TYPE_USE_LONG_LONG @CMP_TYPE_USE_LONG_LONG@
#endif

#ifndef CMP_TYPE_USE___INT64
/* Can we use __int64 safely */
#cmakedefine CMP_TYPE_USE___INT64 @CMP_TYPE_USE___INT64@
#endif

#ifndef CMP_HAVE_SYS_STAT_H
/* Define to 1 if you have the <sys/stat.h> header file. */
#cmakedefine CMP_HAVE_SYS_STAT_H @CMP_HAVE_SYS_STAT_H@
#endif

/* Byte order.  */
/* All compilers that support Mac OS X define either __BIG_ENDIAN__ or
   __LITTLE_ENDIAN__ to match the endianness of the architecture being
   compiled for. This is not necessarily the same as the architecture of the
   machine doing the building. In order to support Universal Binaries on
   Mac OS X, we prefer those defines to decide the endianness.
   On other platforms we use the result of the TRY_RUN. */
#ifndef CMP_WORDS_BIGENDIAN
#if !defined(__APPLE__)
  #cmakedefine CMP_WORDS_BIGENDIAN
#elif defined(__BIG_ENDIAN__)
  #define CMP_WORDS_BIGENDIAN
#endif
#endif


#endif /* _@CMP_CONFIGURATION_HEADER_GUARD@_H_ */

