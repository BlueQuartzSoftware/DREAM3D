/*--------------------------------------------------------------------------
 * This file is autogenerated from @CMP_SOURCE_DIR@/ConfiguredFiles/cmpPrimitiveTypes.h.in 
 * during the cmake
 * configuration of your project. If you need to make changes, edit the 
 * original file NOT THIS FILE.
 * --------------------------------------------------------------------------*/


#ifndef _@CMP_TYPES_HEADER_GUARD@_H_
#define _@CMP_TYPES_HEADER_GUARD@_H_


#include "@CMP_CONFIGURATION_FILE_NAME@"

#if 0
#ifdef CMP_TOP_HEADER_FILE
#undef CMP_TOP_HEADER_FILE
#endif

#cmakedefine CMP_TOP_HEADER_FILE @CMP_TOP_HEADER_FILE@
#ifdef CMP_TOP_HEADER_FILE
#include "@CMP_TOP_HEADER_FILE@"
#undef CMP_TOP_HEADER_FILE
#endif

#endif



#if CMP_HAVE_STDINT_H
#include <stdint.h>
#endif

/*--------------------------------------------------------------------------*/
/* Define named types and constants corresponding to specific integer
 * and floating-point sizes and signedness.  */

/* Select an 8-bit integer type.  */
#if CMP_SIZEOF_CHAR == 1
#if defined (_MSVC_VER) || ( !defined(_UINT8_T) && (CMP_SIZEOF_UINT8_T == 0) )
#define _UINT8_T
typedef unsigned char         uint8_t;
#endif /*_UINT8_T */

#if defined (_MSVC_VER) || ( !defined(_INT8_T) && (CMP_SIZEOF_INT8_T == 0) )
#define _INT8_T
typedef signed char           int8_t;
#endif /*_INT8_T */

# define CMP_TYPE_UINT8 CMP_UNSIGNED_CHAR 

#ifndef CMP_TYPE_INT8
# if CMP_TYPE_CHAR_IS_SIGNED 
#  define CMP_TYPE_INT8 CMP_CHAR
# else
#  define CMP_TYPE_INT8 CMP_SIGNED_CHAR
# endif
#endif
#else   /* CMP_SIZEOF_CHAR == 1 */
# error "No native data type can represent an 8-bit integer."
#endif

/* Select a 16-bit integer type.  */
#if CMP_SIZEOF_SHORT == 2
#if  defined (_MSVC_VER) || ( !defined(_UINT16_T) && (CMP_SIZEOF_UINT16_T == 0) )
#define _UINT16_T
typedef unsigned short       uint16_t;
#endif /* _UINT16_T */

#if defined (_MSVC_VER) || ( !defined(_INT16_T) && (CMP_SIZEOF_INT16_T == 0) )
#define _INT16_T
typedef short                int16_t;
#endif /* _INT16_T */

# define CMP_TYPE_UINT16 CMP_UNSIGNED_SHORT
# define CMP_TYPE_INT16 CMP_SHORT
#elif CMP_SIZEOF_INT == 2
#ifndef _UINT16_T && !defined CMP_SIZEOF_UINT16_T)
#define _UINT16_T
typedef unsigned int       uint16_t;
#endif /* _UINT16_T */

#if !defined(_INT16_T) && !defined(CMP_SIZEOF_INT16_T) 
#define _INT16_T
typedef int                int16_t;
#endif /* _INT16_T */
# define CMP_TYPE_UINT16 CMP_UNSIGNED_INT
# define CMP_TYPE_INT16 CMP_INT
#else
# error "No native data type can represent a 16-bit integer."
#endif

/* Select a 32-bit integer type.  */
#if CMP_SIZEOF_INT == 4
#if defined (_MSVC_VER) || ( !defined(_UINT32_T) && (CMP_SIZEOF_UINT32_T == 0) )
#define _UINT32_T
typedef unsigned int         uint32_t;
#endif /* _UINT32_T */

#if defined (_MSVC_VER) || ( !defined(_INT32_T) && (CMP_SIZEOF_INT32_T == 0) )
#define _INT32_T
typedef int                  int32_t;
#endif /* _INT32_T */
# define CMP_TYPE_UINT32 CMP_UNSIGNED_INT
# define CMP_TYPE_INT32 CMP_INT
#elif CMP_SIZEOF_LONG == 4
#if !defined(_UINT32_T) && !defined CMP_SIZEOF_UINT32_T || defined (_MSVC_VER)
#define _UINT32_T
typedef unsigned long         uint32_t;
#endif /* _UINT32_T */

#if !defined(_INT32_T) && !defined(CMP_SIZEOF_INT32_T) || defined (_MSVC_VER)
#define _INT32_T
typedef long                  int32_t;
#endif /* _INT32_T */
# define CMP_TYPE_UINT32 CMP_UNSIGNED_LONG
# define CMP_TYPE_INT32 CMP_LONG
#else
# error "No native data type can represent a 32-bit integer."
#endif

/* Select a 64-bit integer type.  */
#if defined(CMP_TYPE_USE_LONG_LONG) && CMP_SIZEOF_LONG_LONG == 8
  #if !defined(_UINT64_T) && (CMP_SIZEOF_UINT64_T == 0)
  #define _UINT64_T
  typedef unsigned long long   uint64_t;
  #endif /* _UINT64_T */

  #if !defined(_INT64_T) && (CMP_SIZEOF_INT64_T == 0)
  #define _INT64_T
  typedef long long            int64_t;
  #endif /* _INT64_T */
  
  # define CMP_TYPE_UINT64 CMP_UNSIGNED_LONG_LONG
  # define CMP_TYPE_INT64 CMP_LONG_LONG

#elif CMP_SIZEOF_LONG == 8
  #if !defined(_UINT64_T) && !defined(CMP_SIZEOF_UINT64_T) || defined (_MSVC_VER)
  #define _UINT64_T
  typedef unsigned long   uint64_t;
  #endif /* _UINT64_T */
  
  #if !defined(_INT64_T) && !defined(CMP_SIZEOF_INT64_T) || defined (_MSVC_VER)
  #define _INT64_T
  typedef long            int64_t;
  #endif /* _INT64_T */
  # define CMP_TYPE_UINT64 CMP_UNSIGNED_LONG
  # define CMP_TYPE_INT64 CMP_LONG

#elif defined(CMP_TYPE_USE___INT64) && CMP_SIZEOF___INT64 == 8

  #if !defined(_UINT64_T) && !defined(CMP_SIZEOF_UINT64_T) || defined (_MSVC_VER)
  #define _UINT64_T
  typedef unsigned __int64 uint64;
  #endif /* _UINT64_T */
  
  #if !defined(_INT64_T) && !defined(CMP_SIZEOF_INT64_T) || defined (_MSVC_VER)
  #define _INT64_T
  typedef signed __int64   int64;
  #endif /* _INT64_T */

  # define CMP_TYPE_UINT64 CMP_UNSIGNED___INT64
  # define CMP_TYPE_INT64 CMP___INT64

#else
# error "No native data type can represent a 64-bit integer."
#endif

/* Select a 32-bit floating point type.  */
#if CMP_SIZEOF_FLOAT == 4
typedef float float32;
# define CMP_TYPE_FLOAT32 CMP_FLOAT
#else
# error "No native data type can represent a 32-bit floating point value."
#endif

/* Select a 64-bit floating point type.  */
#if CMP_SIZEOF_DOUBLE == 8
typedef double float64;
# define CMP_TYPE_FLOAT64 CMP_DOUBLE
#else
# error "No native data type can represent a 64-bit floating point value."
#endif

/* For those operating systems that don't actually have a stdint.h file, this section
 * is taken from an OS X stdint.h file and should work just fine with the include
 * guard.
 */
#ifndef CMP_HAVE_STDINT_H
/* 7.18.2 Limits of specified-width integer types:
 *   These #defines specify the minimum and maximum limits
 *   of each of the types declared above.
 */


/* 7.18.2.1 Limits of exact-width integer types */
#define INT8_MAX         127
#define INT16_MAX        32767
#define INT32_MAX        2147483647
#define INT64_MAX        9223372036854775807LL

#define INT8_MIN          -128
#define INT16_MIN         -32768
   /*
      Note:  the literal "most negative int" cannot be written in C --
      the rules in the standard (section 6.4.4.1 in C99) will give it
      an unsigned type, so INT32_MIN (and the most negative member of
      any larger signed type) must be written via a constant expression.
   */
#define INT32_MIN        (-INT32_MAX-1)
#define INT64_MIN        (-INT64_MAX-1)

#define UINT8_MAX         255
#define UINT16_MAX        65535
#define UINT32_MAX        4294967295U
#define UINT64_MAX        18446744073709551615ULL

/* 7.18.4 Macros for integer constants */
#define INT8_C(v)    (v)
#define INT16_C(v)   (v)
#define INT32_C(v)   (v)
#define INT64_C(v)   (v ## LL)

#define UINT8_C(v)   (v ## U)
#define UINT16_C(v)  (v ## U)
#define UINT32_C(v)  (v ## U)
#define UINT64_C(v)  (v ## ULL)

#define INTMAX_C(v)  (v ## LL)
#define UINTMAX_C(v) (v ## ULL)

#endif

#endif /* _@CMP_TYPES_HEADER_GUARD@_H_ */
