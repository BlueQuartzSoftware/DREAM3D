diff a/Source/PipelineBuilder/PipelineBuilderWidget.cpp b/Source/PipelineBuilder/PipelineBuilderWidget.cpp	(rejected hunks)
@@ -327,200 +327,201 @@
   library->setIcon(0, QIcon(":/cubes.png"));
 
   QTreeWidgetItem* presets = new QTreeWidgetItem(filterLibraryTree);
   presets->setText(0, Detail::PrebuiltPipelines);
   presets->setIcon(0, QIcon(":/flag_blue_scroll.png"));
   presets->setExpanded(true);
 
 
   m_favorites = new QTreeWidgetItem(filterLibraryTree);
   m_favorites->setText(0, Detail::FavoritePipelines);
   m_favorites->setIcon(0, QIcon(":/flash.png"));
 
   m_favorites->setExpanded(true);
 
 //  std::cout << "Groups Found: " << std::endl;
   for(std::set<std::string>::iterator iter = groupNames.begin(); iter != groupNames.end(); ++iter)
   {
  //   std::cout << *iter << std::endl;
     QString iconName(":/");
     iconName.append( QString::fromStdString(*iter));
     iconName.append("_Icon.png");
     // Validate the icon is in the resource system
     QFileInfo iconInfo(iconName);
     if (iconInfo.exists() == false)
     {
       iconName = ":/Plugin_Icon.png"; // Switch to our generic icon for Plugins that do not provide their own
     }
 
     QIcon icon(iconName);
     QTreeWidgetItem* filterGroup = new QTreeWidgetItem(library);
     filterGroup->setText(0, QString::fromStdString(*iter));
     filterGroup->setIcon(0, icon);
     std::set<std::string> subGroupNames = fm->getSubGroupNames(*iter);
     for(std::set<std::string>::iterator iter2 = subGroupNames.begin(); iter2 != subGroupNames.end(); ++iter2)
     {
       QTreeWidgetItem* filterSubGroup = new QTreeWidgetItem(filterGroup);
       filterSubGroup->setText(0, QString::fromStdString(*iter2));
   }
   }
   library->setExpanded(true);
 
   errorTableWidget->horizontalHeader()->setResizeMode(0, QHeaderView::ResizeToContents);
   errorTableWidget->horizontalHeader()->setResizeMode(1, QHeaderView::Interactive);
   errorTableWidget->horizontalHeader()->resizeSection(1, 250);
   errorTableWidget->horizontalHeader()->setResizeMode(2, QHeaderView::ResizeToContents);
 
   errorTableWidget->verticalHeader()->setResizeMode(QHeaderView::ResizeToContents);
 
   m_PipelineViewWidget->setErrorsTextArea(errorTableWidget);
 
   // Connect the PipelineViewWidget Signals to slots
   connect(m_PipelineViewWidget, SIGNAL(pipelineFileDropped(const QString&)),
           this, SLOT(openPipelineFile(const QString& )) );
 
 
   m_DocErrorTabsIsOpen = false;
 
   toggleDocs->setChecked(false);
   showErrors->setChecked(false);
 
   m_HelpDialog = new HelpDialog(this);
   m_HelpDialog->setWindowModality(Qt::NonModal);
 
   on_filterLibraryTree_itemClicked(library, 0);
 
   {
     QTreeWidgetItem* presetFilter = new QTreeWidgetItem(presets);
     presetFilter->setText(0, "Ebsd 3D Reconstruction");
     presetFilter->setIcon(0, QIcon(":/scroll.png"));
     QStringList presetFilterList;
     presetFilterList << "ReadH5Ebsd" << "MultiThresholdCells"  << "AlignSectionsMisorientation" << "EBSDSegmentGrains" << "GenerateIPFColors" << "DataContainerWriter";
     m_presetMap["Ebsd 3D Reconstruction"] = presetFilterList;
   }
 
   {
     QTreeWidgetItem* presetFilter = new QTreeWidgetItem(presets);
     presetFilter->setText(0, "Statistics");
     presetFilter->setIcon(0, QIcon(":/scroll.png"));
     QStringList presetFilterList;
     presetFilterList << "DataContainerReader" << "FindSizes"  << "FindShapes" << "FindNeighborhoods" << "FindAvgOrientations" << "FindODF" << "FindMDF"
       << "FindAxisODF" << "FieldDataCSVWriter" << "DataContainerWriter";
     m_presetMap["Statistics"] = presetFilterList;
   }
   {
     QTreeWidgetItem* presetFilter = new QTreeWidgetItem(presets);
     presetFilter->setText(0, "Synthetic(Single Phase)");
     presetFilter->setIcon(0, QIcon(":/scroll.png"));
     QStringList presetFilterList;
     presetFilterList << "InitializeSyntheticVolume" << "PackPrimaryPhases" << "MatchCrystallography" << "GenerateIPFColors" << "DataContainerWriter";
     m_presetMap["Synthetic(Single Phase)"] = presetFilterList;
   }
   {
     QTreeWidgetItem* presetFilter = new QTreeWidgetItem(presets);
     presetFilter->setText(0, "Synthetic(Primary + Precipitate)");
     presetFilter->setIcon(0, QIcon(":/scroll.png"));
     QStringList presetFilterList;
     presetFilterList << "InitializeSyntheticVolume" << "PackPrimaryPhases"  << "InsertPrecipitatePhases" << "MatchCrystallography" << "GenerateIPFColors" << "DataContainerWriter";
     m_presetMap["Synthetic(Primary + Precipitate)"] = presetFilterList;
   }
 
+  m_PipelineViewWidget->setParent(m_QDroppableScrollArea);
 
 }
 
 // -----------------------------------------------------------------------------
 //
 // -----------------------------------------------------------------------------
 void PipelineBuilderWidget::on_filterLibraryTree_currentItemChanged(QTreeWidgetItem* item, QTreeWidgetItem* previous )
 {
   // Get the QFilterWidget Manager Instance
   FilterWidgetManager::Pointer fm = FilterWidgetManager::Instance();
   FilterWidgetManager::Collection factories;
 
   //If the user clicks on Detail::Library, display all
   if ( item->text(0).compare(Detail::Library) == 0)
   {
     factories = fm->getFactories();
     updateFilterGroupList(factories);
   }
   else if (NULL != item->parent() && item->parent()->text(0).compare(Detail::Library) == 0)
   {
     factories = fm->getFactories(item->text(0).toStdString());
     updateFilterGroupList(factories);
   }
   else if (NULL != item->parent() && NULL != item->parent()->parent() && item->parent()->parent()->text(0).compare(Detail::Library) == 0)
   {
     factories = fm->getFactories(item->parent()->text(0).toStdString(), item->text(0).toStdString());
     updateFilterGroupList(factories);
   }
   else if (NULL != item->parent() && item->parent()->text(0).compare(Detail::PrebuiltPipelines) == 0)
   {
       QString text = item->text(0);
       QStringList filterList = m_presetMap[text];
       populateFilterList(filterList);
   }
   else if (NULL != item->parent() && item->parent()->text(0).compare(Detail::FavoritePipelines) == 0)
   {
       QString favoriteName = item->text(0);
       QString favoritePath = m_favoritesMap[favoriteName];
       QStringList filterList = generateFilterListFromFavorite(favoritePath);
       populateFilterList(filterList);
   }
 }
 
 // -----------------------------------------------------------------------------
 //
 // -----------------------------------------------------------------------------
 void PipelineBuilderWidget::on_filterLibraryTree_itemClicked( QTreeWidgetItem* item, int column )
 {
   // Get the QFilterWidget Manager Instance
   FilterWidgetManager::Pointer fm = FilterWidgetManager::Instance();
   FilterWidgetManager::Collection factories;
   if (item->parent() == NULL && item->text(0).compare(Detail::Library) == 0)
   {
     factories = fm->getFactories();
     updateFilterGroupList(factories);
   }
   else if (item->parent() != NULL && item->parent()->text(0).compare(Detail::Library) == 0)
   {
     factories = fm->getFactories(item->text(0).toStdString());
     updateFilterGroupList(factories);
   }
   else if (NULL != item->parent() && NULL != item->parent()->parent() && item->parent()->parent()->text(0).compare(Detail::Library) == 0)
   {
     factories = fm->getFactories(item->parent()->text(0).toStdString(), item->text(0).toStdString());
     updateFilterGroupList(factories);
   }
 }
 
 // -----------------------------------------------------------------------------
 //
 // -----------------------------------------------------------------------------
 void PipelineBuilderWidget::on_filterLibraryTree_itemDoubleClicked( QTreeWidgetItem* item, int column )
 {
   // Get the QFilterWidget Manager Instance
   QTreeWidgetItem* parent = item->parent();
   if (NULL != parent) {
     if (parent->text(0).compare(Detail::PrebuiltPipelines) == 0) {
       QString text = item->text(0);
       QStringList presetList = m_presetMap[text];
       loadPreset(presetList);
     }
     else if (parent->text(0).compare(Detail::FavoritePipelines) == 0) {
       QString favoriteName = item->text(0);
       QString favoritePath = m_favoritesMap[favoriteName];
       loadFavorites(favoritePath);
     }
   }
 }
 
 // -----------------------------------------------------------------------------
 //
 // -----------------------------------------------------------------------------
 void PipelineBuilderWidget::updateFilterGroupList(FilterWidgetManager::Collection &factories)
 {
   // Clear all the current items from the list
   filterList->clear();
   filterList->setSortingEnabled(true);
 
   for (FilterWidgetManager::Collection::iterator factory = factories.begin(); factory != factories.end(); ++factory)
   {
