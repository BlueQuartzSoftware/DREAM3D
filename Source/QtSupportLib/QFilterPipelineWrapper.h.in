/* ============================================================================
* Copyright (c) 2009-2015 BlueQuartz Software, LLC
*
* Redistribution and use in source and binary forms, with or without modification,
* are permitted provided that the following conditions are met:
*
* Redistributions of source code must retain the above copyright notice, this
* list of conditions and the following disclaimer.
*
* Redistributions in binary form must reproduce the above copyright notice, this
* list of conditions and the following disclaimer in the documentation and/or
* other materials provided with the distribution.
*
* Neither the name of BlueQuartz Software, the US Air Force, nor the names of its 
* contributors may be used to endorse or promote products derived from this software 
* without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* The code contained herein was partially funded by the followig contracts:
*    United States Air Force Prime Contract FA8650-07-D-5800
*    United States Air Force Prime Contract FA8650-10-D-5210
*    United States Prime Contract Navy N00173-07-C-2068
*
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


#ifndef Q@CLASS_NAME@_H_
#define Q@CLASS_NAME@_H_

/*
 
 THIS FILE IS AUTOMATICALLY GENERATED BY THE CMAKE BUILD SYSTEM FROM A TEMPLATE
 FILE. DO NOT EDIT THIS FILE. EITHER EDIT THE TEMPLATE FILE OR SIMPLY CREATE
 A NEW CLASS IF YOU NEED MORE FUNCTIONALITY THAN THIS CLASS PROVIDES.
 
 THE ORIGINAL FILE IS LOCATED AT:
 
 @ORIGINAL_FILE@
 
 */

#include <QtCore/QObject>

#include "DREAM3DLib/DREAM3DLib.h"
#include "DREAM3DLib/Common/FilterPipeline.h"
#include "DREAM3DLib/Common/PipelineMessage.h"

/**
* @brief This is a subclass of the @CLASS_NAME@ class that controls this pipeline
* execution. This class is here to simply wrap the methods with Qt's signals and
* slots mechanism to push messages and progress to the Qt based GUI.
*/
class Q@CLASS_NAME@ : public QObject, public FilterPipeline
{
  Q_OBJECT
  public:
  Q@CLASS_NAME@(QObject* parent = 0) :
    QObject(parent),
    FilterPipeline()
    {
    }
    virtual ~Q@CLASS_NAME@() {}

    /**
     * @brief Either prints a message or sends the message to the User Interface
     * @param message The message to print
     * @param progress The progress of the GrainGenerator normalized to a value between 0 and 100
     */
    virtual void updateProgressAndMessage(const char* message, int value)
    {
      emit updateProgress(value);
      emit progressMessage(QString(message));
    }

    /**
     * @brief This method reports progress such that a user interface element such
     * as a progress bar could be updated. It is assumed the value will fluctuate
     * between 0 and 100.
     * @param value
     */
    virtual void pipelineProgress(int value)
    {
      emit updateProgress(value);
    }
    
    /**
     * @brief This message reports some human readable message suitable for display
     * on a GUI or printed to a console or possibly saved to a log file
     * @param message
     */
    virtual void pipelineProgressMessage(const char* message)
    {
      emit progressMessage(QString(message));
    }
 

	virtual void pipelineMessage(PipelineMessage msg)
	{
		emit firePipelineMessage(msg);
	}
	
	virtual void pipelineMessage(std::vector<PipelineMessage> &messages)
	{
		for (std::vector<PipelineMessage>::iterator iter = messages.begin(); iter != messages.end(); ++iter)
		{
			pipelineMessage(*iter);
		}
	}
    
    /**
     * @brief This method is called from the run() method just before exiting and
     * signals the end of the pipeline execution
     */
    virtual void pipelineFinished()
    {
      emit finished();
    }

    /**
     * Qt Signals for connections
     */
     signals:
       void progressMessage(QString message);
       void firePipelineMessage(PipelineMessage msg);
       void updateProgress(int value);
       void finished();

  public slots:
    /**
     * @brief Slot to receive a signal to cancel the operation
     */
    void on_CancelWorker()
    {
      setCancel(true);
    }

    void run() { FilterPipeline::run(); }

  protected:


  private:
    Q@CLASS_NAME@(const Q@CLASS_NAME@&); // Copy Constructor Not Implemented
    void operator=(const Q@CLASS_NAME@&); // Operator '=' Not Implemented
};

#endif /* QGRAINGENERATOR_H_ */
