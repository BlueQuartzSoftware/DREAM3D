#--////////////////////////////////////////////////////////////////////////////
#-- Your License or copyright can go here
#--////////////////////////////////////////////////////////////////////////////

project(GrainCurvaturePlugin)

set(PLUGIN_NAME GrainCurvaturePlugin)

# --------------------------------------------------------------------
# This plugin needs the Eigen library for Least Squares fit and Eigen
# value/vector calculations.
Find_Package(Eigen REQUIRED)
if (NOT EIGEN_FOUND)
  message(FATAL_ERROR "Eigen is required for the Grain Curvature plugin to work")
endif()

include_directories( ${EIGEN_INCLUDE_DIRS} )

# --------------------------------------------------------------------
# Look for Qt 4 as we need it for the plugin GUI to be generated
if(NOT QT4_FOUND)
    message(FATAL_ERROR "Qt 4 is Needed for this GrainCurvaturePlugin.")
endif()
include( ${QT_USE_FILE} )


set(GrainCurvaturePlugin_Project_SRCS "")

#-------
# Start writing this header file
set(AllFiltersHeaderFile ${GrainCurvaturePlugin_BINARY_DIR}/GrainCurvatureFilters/GrainCurvatureFilters.h)
file(WRITE ${AllFiltersHeaderFile} "#ifndef _GrainCurvature_Filters_H_\n#define _GrainCurvature_Filters_H_\n\n")
# --------------------------------------------------------------------
# Create a File that will be used to generate a program that itself generates a
# QFilterWidget derived header for each of the filters based on thier exposed
# filter options
set(CodeGeneratorFile  ${GrainCurvaturePlugin_BINARY_DIR}/GrainCurvatureCodeGenerator.h)
file(WRITE ${CodeGeneratorFile} "")
# --------------------------------------------------------------------
# We are going to generate this file in the binary directory but not
# really use it currently. If you need to update the FilterDocs.qrc file
# then you can copy this generated file over the file that is in the source
# directory
set(md5_filterdocs_current "0")
#if(EXISTS ${GrainCurvaturePlugin_SOURCE_DIR}/Documentation/Filters/FilterDocs.qrc)
#  file(MD5 ${GrainCurvaturePlugin_SOURCE_DIR}/Documentation/Filters/FilterDocs.qrc md5_filterdocs_current)
#endif()
set(HtmlDocQrcFile ${GrainCurvaturePlugin_BINARY_DIR}/Documentation/Filters/FilterDocs.qrc)
#file(WRITE ${HtmlDocQrcFile} "<!-- This file is autogenerated during the CMake run so any new filters should get auto-added to this file.  -->\n")
#file(APPEND ${HtmlDocQrcFile} "<!-- DO NOT EDIT THIS FILE. IT WILL BE OVER WRITTEN THE NEXT TIME CMAKE IS RUN  -->\n")
#file(APPEND ${HtmlDocQrcFile} "<!DOCTYPE RCC>\n<RCC version=\"1.0\">\n  <qresource>\n")
#file(APPEND ${HtmlDocQrcFile} "    <file>document.css</file>\n    <file>catalog.css</file>\n    <file>index.html</file>\n")
# --------------------------------------------------------------------
# Create a File that has all the headers for the various Filter Widgets
set(AllFilterWidgetsHeaderFile ${GrainCurvaturePlugin_BINARY_DIR}/FilterWidgetHeaders.h)
file(WRITE ${AllFilterWidgetsHeaderFile} "#ifndef _ALLGrainCurvaturePlugin_H_\n#define _ALLGrainCurvaturePlugin_H_\n")
# --------------------------------------------------------------------
# Create a File that will register all of the DREAM3D Filters
set(RegisterKnownFilterWidgetsFile ${GrainCurvaturePlugin_BINARY_DIR}/GrainCurvatureFilters/RegisterKnownFilterWidgets.cpp)
file(WRITE ${RegisterKnownFilterWidgetsFile} "#include \"PipelineBuilder/FilterWidgetManager.h\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "#include \"QFilterWidgetFactory.hpp\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "#include \"FilterWidgetHeaders.h\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "\nvoid GrainCurvaturePlugin::registerFilterWidgets()\n{\n")
# --------------------------------------------------------------------
# Generate a file with all of our MOC'ed sources and  headers
set(GrainCurvatureWidget_GEN_HDRS_File ${GrainCurvaturePlugin_BINARY_DIR}/GrainCurvatureWidget_GEN_HDRS_File.cmake)
set(GrainCurvatureWidget_GEN_SRCS_File ${GrainCurvaturePlugin_BINARY_DIR}/GrainCurvatureWidget_GEN_SRCS.cmake)
file(WRITE ${GrainCurvatureWidget_GEN_HDRS_File})
file(WRITE ${GrainCurvatureWidget_GEN_SRCS_File})

#-------------------------------------------------------------------------------
# Macro START_FILTER_GROUP
macro(START_FILTER_GROUP filterGroup)
    file(APPEND ${AllFiltersHeaderFile} "\n/* ------ ${filterGroup} --------- */\n")
    file(APPEND ${CodeGeneratorFile} "//----- ${filterGroup} --------------- \n")
 #   file(APPEND ${HtmlDocQrcFile} "\n    <!-- ***** ${filterGroup} ***** -->\n")
    file(APPEND ${AllFilterWidgetsHeaderFile} "\n/* ------ ${filterGroup} --------- */\n")
    file(APPEND ${RegisterKnownFilterWidgetsFile} "\n    /* ------ ${filterGroup} --------- */\n")
    file(MAKE_DIRECTORY ${GrainCurvaturePlugin_BINARY_DIR}/${filterGroup}Widgets)
    message(STATUS "Generating Widgets for ${filterGroup}")
endmacro()

#-------------------------------------------------------------------------------
# Macro ADD_DREAM3D_SUPPORT_HEADER
macro(ADD_DREAM3D_SUPPORT_HEADER filterGroup headerFileName)
    set(GrainCurvaturePlugin_Project_SRCS ${GrainCurvaturePlugin_Project_SRCS}
                    ${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${headerFileName})
    cmp_IDE_SOURCE_PROPERTIES( "GrainCurvaturePlugin/${filterGroup}" "${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${headerFileName}" "" "0")
endmacro()
#-------------------------------------------------------------------------------
# Macro ADD_DREAM3D_SUPPORT_SOURCE
macro(ADD_DREAM3D_SUPPORT_SOURCE filterGroup sourceFileName)
    set(GrainCurvaturePlugin_Project_SRCS ${GrainCurvaturePlugin_Project_SRCS}
                    ${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${sourceFileName})
    cmp_IDE_SOURCE_PROPERTIES( "GrainCurvaturePlugin/${filterGroup}" "" "${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${sourceFileName}" "0")
endmacro()
#-------------------------------------------------------------------------------
# Macro ADD_DREAM3D_SUPPORT_CLASS
macro(ADD_DREAM3D_SUPPORT_CLASS filterGroup className)
    set(GrainCurvaturePlugin_Project_SRCS ${GrainCurvaturePlugin_Project_SRCS}
                    ${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${className}.h
                    ${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${className}.cpp)
    cmp_IDE_SOURCE_PROPERTIES( "GrainCurvaturePlugin/${filterGroup}" "${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${className}.h" "${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${className}.cpp" "0")
endmacro()


#-------------------------------------------------------------------------------
# Macro ADD_DREAM3D_FILTER
macro(ADD_DREAM3D_FILTER filterGroup filterName filterDocFile filterDocImages publicFilter)

    set(GrainCurvaturePlugin_Project_SRCS ${GrainCurvaturePlugin_Project_SRCS}
                    ${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${filterName}.h
                    ${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${filterName}.cpp)
    #--- Organize inside the Visual Studio/Xcode Projects
    cmp_IDE_SOURCE_PROPERTIES( "GrainCurvaturePlugin/${filterGroup}" "${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${filterName}.h" "${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${filterName}.cpp" "0")

    #-- Create an Install Rule for the headers
    if ( ${PROJECT_INSTALL_HEADERS} EQUAL 1 )
        INSTALL (FILES ${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}/${filterName}.h
            DESTINATION include/GrainCurvaturePlugin/${filterGroup}
            COMPONENT Headers   )
    endif()

    file (APPEND ${AllFiltersHeaderFile} "#include \"${filterGroup}/${filterName}.h\"\n")

    IF ( ${publicFilter} STREQUAL TRUE)
        message(STATUS "    ${filterName}")
        IF (NOT EXISTS ${GrainCurvaturePlugin_SOURCE_DIR}/${filterGroup}Widgets/Q${filterName}Widget.h )
#            set(GrainCurvatureWidget_GEN_HDRS ${GrainCurvatureWidget_GEN_HDRS} ${GrainCurvaturePlugin_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.h)
            file(APPEND ${GrainCurvatureWidget_GEN_HDRS_File} "${GrainCurvaturePlugin_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.h;")
#            set(GrainCurvatureWidget_GEN_SRCS ${GrainCurvatureWidget_GEN_SRCS} ${GrainCurvaturePlugin_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.cpp)
            file(APPEND ${GrainCurvatureWidget_GEN_SRCS_File} "${GrainCurvaturePlugin_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.cpp;")
            IF ( NOT EXISTS ${GrainCurvaturePlugin_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.h)
                set(GENERATED_MOC_SOURCE_FILE "moc_Q${name}Widget.cpp")
                configure_file(${FilterWidgetsLib_SOURCE_DIR}/QFilterWidget_Template.h.in
                              ${GrainCurvaturePlugin_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.h)
                configure_file(${FilterWidgetsLib_SOURCE_DIR}/QFilterWidget_Template.cpp.in
                              ${GrainCurvaturePlugin_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.cpp)
            endif()
        endif()


        file(APPEND ${CodeGeneratorFile} "createHeaderFile<${filterName}>(\"${filterGroup}\", \"${filterName}\");\n")
        file(APPEND ${CodeGeneratorFile} "createSourceFile<${filterName}>(\"${filterGroup}\", \"${filterName}\");\n")
        file(APPEND ${CodeGeneratorFile} "createHTMLFile<${filterName}>(\"${filterGroup}\", \"${filterName}\");\n")


        file(APPEND ${AllFilterWidgetsHeaderFile} "#include \"${filterGroup}Widgets/Q${filterName}Widget.h\"\n")

#        file(APPEND ${HtmlDocQrcFile} "    <file>${filterGroup}/${filterName}.html</file>\n")
#        foreach(resource ${filterDocImages})
#            file(APPEND ${HtmlDocQrcFile} "    <file>${filterGroup}/${resource}</file>\n")
#        endforeach()

        file(APPEND ${RegisterKnownFilterWidgetsFile} "   QFilterWidgetFactory<Q${filterName}Widget>::Pointer q${filterName}WidgetFactory = QFilterWidgetFactory<Q${filterName}Widget>::New(); \n")
        file(APPEND ${RegisterKnownFilterWidgetsFile} "   FilterWidgetManager::Instance()->addFilterWidgetFactory(\"${filterName}\",q${filterName}WidgetFactory); \n\n")

    endif()
endmacro()


# Add in our Filter classes
include(${GrainCurvaturePlugin_SOURCE_DIR}/GrainCurvatureFilters/SourceList.cmake)


#-----------------------------------------------------
# Close up all the files that we just generated
file(APPEND ${AllFiltersHeaderFile} "\n#endif\n")
file(APPEND ${AllFilterWidgetsHeaderFile} "\n#endif\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "\n }\n")
#file(APPEND ${HtmlDocQrcFile} "  </qresource>\n</RCC>\n")



#--------------------------
include_directories( ${HDF5_INCLUDE_DIR} )
include_directories( ${PROJECT_CODE_DIR} )
include_directories( ${QtSupport_BINARY_DIR} )
include_directories( ${FilterWidgetsLib_SOURCE_DIR} )
include_directories( ${GrainCurvaturePlugin_BINARY_DIR} )
include_directories( ${GrainCurvaturePlugin_SOURCE_DIR}/.. )
include_directories( ${GrainCurvaturePlugin_SOURCE_DIR})

# ******************************************************************************
# Create our custom executable that will generate most of our QFilterWidget
# classes from information stored in the Filters themselves.
# Read the file back into a string so we can configure our file
file(READ ${RegisterKnownFilterWidgetsFile} QFILTERWIDGET_FACTORY_SOURCE)
file(READ ${CodeGeneratorFile} CODE_GEN_FILTER_FUNCTION)
file(READ ${GrainCurvatureWidget_GEN_HDRS_File} GrainCurvatureWidget_GEN_HDRS)
file(READ ${GrainCurvatureWidget_GEN_SRCS_File} GrainCurvatureWidget_GEN_SRCS)

# Remove the temp files that we no longer need
file(REMOVE ${CodeGeneratorFile})
file(REMOVE ${GrainCurvatureWidget_GEN_HDRS_File})
file(REMOVE ${GrainCurvatureWidget_GEN_SRCS_File})


set(FILTER_HEADERS "#include \"${AllFiltersHeaderFile}\"")
set(FILTER_WIDGETS_TEMP_DIR ${GrainCurvaturePlugin_BINARY_DIR}/Temp)
set(FILTER_WIDGETS_BINARY_DIR ${GrainCurvaturePlugin_BINARY_DIR})
set(FILTER_WIDGETS_SOURCE_DIR ${GrainCurvaturePlugin_SOURCE_DIR})
set(FILTER_WIDGETS_DOCS_DIR ${GrainCurvaturePlugin_SOURCE_DIR}/Documentation/Filters)
set(FILTER_INCLUDE_PREFIX "")
file(MAKE_DIRECTORY ${GrainCurvaturePlugin_BINARY_DIR}/Temp)
configure_file( ${FilterWidgetsLib_SOURCE_DIR}/FilterWidgetsCodeGen.h.in
                ${GrainCurvaturePlugin_BINARY_DIR}/FilterWidgetCodeGen.h)


add_executable(GrainCurvatureWidgetCodeGen  ${FilterWidgetsLib_SOURCE_DIR}/FilterWidgetCodeGen.cpp
                                            ${GrainCurvaturePlugin_BINARY_DIR}/FilterWidgetCodeGen.h
                                            ${GrainCurvaturePlugin_Project_SRCS}
                                            )
target_link_libraries(GrainCurvatureWidgetCodeGen MXA EbsdLib DREAM3DLib)


# Now run the code to generate the header files which will over write the place
# holder files that were generated from above
add_custom_command(TARGET GrainCurvatureWidgetCodeGen POST_BUILD
                    COMMAND $<TARGET_FILE:GrainCurvatureWidgetCodeGen> )
# ******************************************************************************


add_definitions(-DDREAM3D_USE_QT)
if (MSVC)   # Do not generate manifests for the plugins - caused issues loading plugins
  set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /MANIFEST:NO")
endif()


# --------------------------------------------------------------------
# These are the NON-Filter but Qt derived sources of the plugin. In case you have
# additional Qt source files that you need compiled.
set(GrainCurvaturePlugin_HDRS
  ${PROJECT_SOURCE_DIR}/GrainCurvaturePlugin.h
)

set(GrainCurvaturePlugin_SRCS
 ${PROJECT_SOURCE_DIR}/GrainCurvaturePlugin.cpp
)
cmp_IDE_SOURCE_PROPERTIES( "GrainCurvature/" "${GrainCurvaturePlugin_HDRS}" "${GrainCurvaturePlugin_SRCS}" "0")


# --------------------------------------------------------------------
# We need to run Qt's moc system on our Qt based files (Anything deriving from QObject)
# This cmake code sets up moc to be run.
QT4_WRAP_CPP( GrainCurvaturePlugin_Generated_MOC_SRCS ${GrainCurvatureWidget_GEN_HDRS})
QT4_WRAP_CPP( GrainCurvaturePlugin_MOC_SRCS ${GrainCurvaturePlugin_HDRS} )

# These generated moc files will be #include in the FilterWidget source file that
# are generated so we need to tell the build system to NOT compile these files
set_source_files_properties( ${GrainCurvaturePlugin_Generated_MOC_SRCS} PROPERTIES HEADER_FILE_ONLY TRUE)
set_source_files_properties( ${GrainCurvaturePlugin_MOC_SRCS} PROPERTIES HEADER_FILE_ONLY TRUE)

# --------------------------------------------------------------------
# -- Create a Qt Resource header file of the documentation html files
QT4_ADD_RESOURCES( GrainCurvaturePlugin_Generated_RC_SRCS "${HtmlDocQrcFile}"  )

# --------------------------------------------------------------------
# Group all the generated source files in IDE's that support it. Makes it clear
# to the user of the IDE what is generated and what is not.
cmp_IDE_SOURCE_PROPERTIES("Generated" "${GrainCurvaturePlugin_Generated_RC_SRCS};${GrainCurvaturePlugin_Generated_MOC_SRCS};${GrainCurvaturePlugin_MOC_SRCS}" "${GrainCurvaturePlugin_GEN_HDRS};${GrainCurvaturePlugin_GEN_SRCS}" "0")

# --------------------------------------------------------------------
# Create an install rule for the headers. If you do NOT want your headers
# installed for a deployment to other machines then change the PROJECT_INSTALL_HEADERS
# to a Zero
if ( ${PROJECT_INSTALL_HEADERS} EQUAL 1 )
    INSTALL (FILES ${GrainCurvaturePlugin_HDRS}
            DESTINATION include/${PLUGIN_NAME}/GrainCurvature
            COMPONENT Headers   )
endif()


set (GrainCurvaturePlugin_Project_SRCS
   ${GrainCurvaturePlugin_Project_SRCS}
   ${GrainCurvaturePlugin_HDRS}
   ${GrainCurvaturePlugin_SRCS}
   ${GrainCurvatureWidget_GEN_HDRS}
   ${GrainCurvatureWidget_GEN_SRCS}
   ${GrainCurvaturePlugin_Generated_MOC_SRCS}
   ${GrainCurvaturePlugin_MOC_SRCS}
   ${GrainCurvaturePlugin_Generated_RC_SRCS}
   )

# --------------------------------------------------------------------
# Setup output Directory for the plugin
if(NOT MSVC)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${DREAM3DProj_BINARY_DIR}/Bin/plugins  )
endif()

# --------------------------------------------------------------------
# Add the plugin as a MODULE
add_library(${PLUGIN_NAME} MODULE ${GrainCurvaturePlugin_Project_SRCS})
# --------------------------------------------------------------------
# Link the plugin with other DREAM3D Libraries.
target_link_libraries(${PLUGIN_NAME}
                    MXA
                    DREAM3DLib
                    ${QT_QTCORE_LIBRARY}
                    ${QT_QTGUI_LIBRARY}
                    QtSupport
                    PipelineBuilderLib
                    )
# --------------------------------------------------------------------
# Add a dependency on the code generation step to make sure the code is
# generated before we try to compile the plugin
add_dependencies(${PLUGIN_NAME} GrainCurvatureWidgetCodeGen)

# --------------------------------------------------------------------
# Set some additional properties of the plugin like its output name
PluginProperties(${PLUGIN_NAME} "_debug" "${DREAM3D_VERSION}"
                "${DREAM3D_BINARY_DIR}" "${CMP_PLUGIN_LIST_FILE}")

# --------------------------------------------------------------------
# Put back the output directory
if (NOT MSVC)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${DREAM3DProj_BINARY_DIR}/Bin  )
endif()

