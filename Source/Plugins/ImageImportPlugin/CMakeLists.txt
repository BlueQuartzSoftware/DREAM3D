#--////////////////////////////////////////////////////////////////////////////
#-- Your License or copyright can go here
#--////////////////////////////////////////////////////////////////////////////

project(ImageImportPlugin)

set(PLUGIN_NAME ImageImportPlugin)

# --------------------------------------------------------------------
# Look for Qt 4 as we need it for the plugin GUI to be generated
if(NOT QT4_FOUND)
    message(FATAL_ERROR "Qt 4 is Needed for this ImageImportPlugin.")
endif()
include( ${QT_USE_FILE} )


set(ImageImportPlugin_Project_SRCS "")

include(${DREAM3DProj_SOURCE_DIR}/Source/DREAM3DLib/DREAM3DLibMacros.cmake)

#-------
# Start writing this header file
set(AllFiltersHeaderFile ${ImageImportPlugin_BINARY_DIR}/ImageImportFilters/ImageImportFilters.h)
file(WRITE ${AllFiltersHeaderFile} "#ifndef _ImageImport_Filters_H_\n#define _ImageImport_Filters_H_\n\n")
# --------------------------------------------------------------------
# Create a File that will be used to generate a program that itself generates a
# QFilterWidget derived header for each of the filters based on thier exposed
# filter options
set(CodeGeneratorFile  ${ImageImportPlugin_BINARY_DIR}/ImageImportCodeGenerator.h)
file(WRITE ${CodeGeneratorFile} "")
# --------------------------------------------------------------------
# We are going to generate this file in the binary directory but not
# really use it currently. If you need to update the FilterDocs.qrc file
# then you can copy this generated file over the file that is in the source
# directory
#set(md5_filterdocs_current "0")
#if(EXISTS ${ImageImportPlugin_SOURCE_DIR}/Documentation/Filters/FilterDocs.qrc)
#  file(MD5 ${ImageImportPlugin_SOURCE_DIR}/Documentation/Filters/FilterDocs.qrc md5_filterdocs_current)
#endif()
#set(HtmlDocQrcFile ${ImageImportPlugin_SOURCE_DIR}/Documentation/Filters/FilterDocs.qrc)
#file(WRITE ${HtmlDocQrcFile} "<!-- This file is autogenerated during the CMake run so any new filters should get auto-added to this file.  -->\n")
#file(APPEND ${HtmlDocQrcFile} "<!-- DO NOT EDIT THIS FILE. IT WILL BE OVER WRITTEN THE NEXT TIME CMAKE IS RUN  -->\n")
#file(APPEND ${HtmlDocQrcFile} "<!DOCTYPE RCC>\n<RCC version=\"1.0\">\n  <qresource>\n")
#file(APPEND ${HtmlDocQrcFile} "    <file>document.css</file>\n    <file>catalog.css</file>\n    <file>index.html</file>\n")
# --------------------------------------------------------------------
# Create a File that has all the headers for the various Filter Widgets
set(AllFilterWidgetsHeaderFile ${ImageImportPlugin_BINARY_DIR}/FilterWidgetHeaders.h)
file(WRITE ${AllFilterWidgetsHeaderFile} "#ifndef _ALLImageImportPlugin_H_\n#define _ALLImageImportPlugin_H_\n")
# --------------------------------------------------------------------
# Create a File that will register all of the DREAM3D Filters
set(RegisterKnownFilterWidgetsFile ${ImageImportPlugin_BINARY_DIR}/ImageImportFilters/RegisterKnownFilterWidgets.cpp)
file(WRITE ${RegisterKnownFilterWidgetsFile} "/* This file was AUTO GENERATED During the CMake Run. DO NOT EDIT THIS FILE. Edit the CMake files that generate this file */\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "#include \"PipelineBuilder/FilterWidgetManager.h\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "#include \"QFilterWidgetFactory.hpp\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "#include \"FilterWidgetHeaders.h\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "\nvoid ImageImportPlugin::registerFilterWidgets()\n{\n")
# --------------------------------------------------------------------
# Generate a file with all of our MOC'ed sources and  headers
set(FilterWidget_GEN_HDRS_File ${ImageImportPlugin_BINARY_DIR}/FilterWidget_GEN_HDRS_File.cmake)
set(FilterWidget_GEN_SRCS_File ${ImageImportPlugin_BINARY_DIR}/FilterWidget_GEN_SRCS_File.cmake)
file(WRITE ${FilterWidget_GEN_HDRS_File})
file(WRITE ${FilterWidget_GEN_SRCS_File})

set(Project_SRCS "")

# Add in our Filter classes
include(${ImageImportPlugin_SOURCE_DIR}/ImageImportFilters/SourceList.cmake)


set(ImageImportPlugin_Project_SRCS ${Project_SRCS})

#-----------------------------------------------------
# Close up all the files that we just generated
file(APPEND ${AllFiltersHeaderFile} "\n#endif\n")
file(APPEND ${AllFilterWidgetsHeaderFile} "\n#endif\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "}\n")
#file(APPEND ${HtmlDocQrcFile} "  </qresource>\n</RCC>\n")



#--------------------------
include_directories( ${HDF5_INCLUDE_DIR} )
include_directories( ${PROJECT_CODE_DIR} )
include_directories( ${QtSupport_BINARY_DIR} )
include_directories( ${QtSupport_SOURCE_DIR} )
include_directories( ${PipelineBuilderLib_SOURCE_DIR} )
include_directories( ${PipelineBuilderLib_BINARY_DIR} )
include_directories( ${FilterWidgetsLib_SOURCE_DIR} )
include_directories( ${ImageImportPlugin_BINARY_DIR} )
include_directories( ${ImageImportPlugin_SOURCE_DIR}/.. )
include_directories( ${ImageImportPlugin_SOURCE_DIR})

# ******************************************************************************
# Create our custom executable that will generate most of our QFilterWidget
# classes from information stored in the Filters themselves.
# Read the file back into a string so we can configure our file
file(READ ${RegisterKnownFilterWidgetsFile} QFILTERWIDGET_FACTORY_SOURCE)
file(READ ${CodeGeneratorFile} CODE_GEN_FILTER_FUNCTION)
file(READ ${FilterWidget_GEN_HDRS_File} ImageImportWidget_GEN_HDRS)
file(READ ${FilterWidget_GEN_SRCS_File} ImageImportWidget_GEN_SRCS)

# Remove the temp files that we no longer need
file(REMOVE ${CodeGeneratorFile})
file(REMOVE ${FilterWidget_GEN_HDRS_File})
file(REMOVE ${FilterWidget_GEN_SRCS_File})


set(FILTER_HEADERS "#include \"${AllFiltersHeaderFile}\"")
set(FILTER_WIDGETS_TEMP_DIR ${ImageImportPlugin_BINARY_DIR}/Temp)
set(FILTER_WIDGETS_BINARY_DIR ${ImageImportPlugin_BINARY_DIR})
set(FILTER_WIDGETS_SOURCE_DIR ${ImageImportPlugin_SOURCE_DIR})
set(FILTER_WIDGETS_DOCS_DIR ${ImageImportPlugin_SOURCE_DIR}/Documentation/Filters)
set(FILTER_INCLUDE_PREFIX "")
file(MAKE_DIRECTORY ${ImageImportPlugin_BINARY_DIR}/Temp)
configure_file( ${FilterWidgetsLib_SOURCE_DIR}/FilterWidgetsCodeGen.h.in
                ${ImageImportPlugin_BINARY_DIR}/FilterWidgetCodeGen.h)

# --------------------------------------------------------------------
# On Linux we need -fPIC for linking static and shared libraries
if(UNIX AND NOT APPLE)
  set_source_files_properties(${ImageImportPlugin_Project_SRCS} PROPERTIES COMPILE_FLAGS -fPIC)
  set_source_files_properties(${FilterWidgetsLib_SOURCE_DIR}/FilterWidgetCodeGen.h PROPERTIES COMPILE_FLAGS -fPIC)
  set_source_files_properties(${FilterWidgetsLib_SOURCE_DIR}/FilterWidgetCodeGen.cpp PROPERTIES COMPILE_FLAGS -fPIC)
endif()

add_executable(ImageImportWidgetCodeGen  ${FilterWidgetsLib_SOURCE_DIR}/FilterWidgetCodeGen.cpp
                                            ${ImageImportPlugin_BINARY_DIR}/FilterWidgetCodeGen.h
                                            ${ImageImportPlugin_Project_SRCS}
                                            )
target_link_libraries(ImageImportWidgetCodeGen MXA EbsdLib DREAM3DLib ${QT_QTCORE_LIBRARY} ${QT_QTGUI_LIBRARY})


# Now run the code to generate the header files which will over write the place
# holder files that were generated from above
add_custom_command(TARGET ImageImportWidgetCodeGen POST_BUILD
                    COMMAND $<TARGET_FILE:ImageImportWidgetCodeGen> )
# ******************************************************************************


add_definitions(-DDREAM3D_USE_QT)
if(MSVC)   # Do not generate manifests for the plugins - caused issues loading plugins
  set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /MANIFEST:NO")
endif()


# --------------------------------------------------------------------
# These are the NON-Filter but Qt derived sources of the plugin. In case you have
# additional Qt source files that you need compiled.
set(ImageImportPlugin_HDRS
  ${PROJECT_SOURCE_DIR}/ImageImportPlugin.h
)

set(ImageImportPlugin_SRCS
 ${PROJECT_SOURCE_DIR}/ImageImportPlugin.cpp
)
cmp_IDE_SOURCE_PROPERTIES( "ImageImport/" "${ImageImportPlugin_HDRS}" "${ImageImportPlugin_SRCS}" "0")


# --------------------------------------------------------------------
# This section is for a Custom GUI for a Filter. We need to add the Header, Source and UI file here so that
# they do not get auto generated during cmake and build time.
set(ImageImportPlugin_CustomWidgets_HDRS
  ${PROJECT_SOURCE_DIR}/ImageImportPlugin/ImageImportFiltersWidgets/QImportImageStackWidget.h
)

set(ImageImportPlugin_CustomWidgets_SRCS
  ${PROJECT_SOURCE_DIR}/ImageImportPlugin/ImageImportFiltersWidgets/QImportImageStackWidget.cpp
)

QT4_WRAP_UI( ImageImportPlugin_Generated_UI_HDRS
  ${PROJECT_SOURCE_DIR}/ImageImportPlugin/ImageImportFiltersWidgets/QImportImageStackWidget.ui
)


# --------------------------------------------------------------------
# We need to run Qt's moc system on our Qt based files (Anything deriving from QObject)
# This cmake code sets up moc to be run.
QT4_WRAP_CPP( ImageImportPlugin_Generated_MOC_SRCS ${ImageImportWidget_GEN_HDRS} )
QT4_WRAP_CPP( ImageImportPlugin_MOC_SRCS ${ImageImportPlugin_HDRS} ${ImageImportPlugin_CustomWidgets_HDRS})

# These generated moc files will be #include in the FilterWidget source file that
# are generated so we need to tell the build system to NOT compile these files
set_source_files_properties( ${ImageImportPlugin_Generated_MOC_SRCS} PROPERTIES HEADER_FILE_ONLY TRUE)
set_source_files_properties( ${ImageImportPlugin_MOC_SRCS} PROPERTIES HEADER_FILE_ONLY TRUE)

# --------------------------------------------------------------------
# -- Create a Qt Resource header file of the documentation html files
#QT4_ADD_RESOURCES( ImageImportPlugin_Generated_RC_SRCS "${HtmlDocQrcFile}"  )

# --------------------------------------------------------------------
# Group all the generated source files in IDE's that support it. Makes it clear
# to the user of the IDE what is generated and what is not.
cmp_IDE_SOURCE_PROPERTIES( "Generated/Qt_Moc" "${ImageImportPlugin_GEN_HDRS}" "${ImageImportPlugin_Generated_MOC_SRCS};${ImageImportPlugin_MOC_SRCS};${ImageImportPlugin_GEN_SRCS}" "0")
cmp_IDE_SOURCE_PROPERTIES( "Generated/Qt_Uic" "${ImageImportPlugin_Generated_UI_HDRS}" "" "0")
cmp_IDE_SOURCE_PROPERTIES( "Generated/Qt_Qrc" "${ImageImportPlugin_Generated_RC_SRCS}" "" "0")


# --------------------------------------------------------------------
# Create an install rule for the headers. If you do NOT want your headers
# installed for a deployment to other machines then change the PROJECT_INSTALL_HEADERS
# to a Zero
if( ${PROJECT_INSTALL_HEADERS} EQUAL 1 )
    INSTALL(FILES ${ImageImportPlugin_HDRS} DESTINATION include/${PLUGIN_NAME}/ImageImport COMPONENT Headers)
endif()


set(ImageImportPlugin_Project_SRCS
   ${ImageImportPlugin_Project_SRCS}
   ${ImageImportPlugin_HDRS}
   ${ImageImportPlugin_SRCS}
   ${ImageImportPlugin_CustomWidgets_HDRS}
   ${ImageImportPlugin_CustomWidgets_SRCS}
   ${ImageImportPlugin_Generated_UI_HDRS}
   ${ImageImportWidget_GEN_HDRS}
   ${ImageImportWidget_GEN_SRCS}
   ${ImageImportPlugin_Generated_MOC_SRCS}
   ${ImageImportPlugin_MOC_SRCS}
   ${ImageImportPlugin_Generated_RC_SRCS}
   )

# --------------------------------------------------------------------
# Setup output Directory for the plugin
if(NOT MSVC)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${DREAM3DProj_BINARY_DIR}/Bin/plugins  )
endif()

# --------------------------------------------------------------------
# Add the plugin as a MODULE
add_library(${PLUGIN_NAME} MODULE ${ImageImportPlugin_Project_SRCS})
# --------------------------------------------------------------------
# Link the plugin with other DREAM3D Libraries.
target_link_libraries(${PLUGIN_NAME}
                    MXA
                    DREAM3DLib
                    ${QT_QTCORE_LIBRARY}
                    ${QT_QTGUI_LIBRARY}
                    QtSupport
                    PipelineBuilderLib
                    )

# --------------------------------------------------------------------
# This is a special section for this plugin which requires the Qt based
# image plugins so we need to make sure those are deployed with the Application
# Clear the file first otherwise we get duplicates
file(WRITE ${PROJECT_BINARY_DIR}/Qt_Plugins.txt "")
FindQt4Plugins("qgif;qjpeg;qtiff" "${DREAM3DProj_BINARY_DIR}/Qt_Plugins.txt"
                "${DREAM3DProj_BINARY_DIR}/LibSearchDirs.txt"
                "imageformats" )


# --------------------------------------------------------------------
# Add a dependency on the code generation step to make sure the code is
# generated before we try to compile the plugin
add_dependencies(${PLUGIN_NAME} ImageImportWidgetCodeGen)

# --------------------------------------------------------------------
# Set some additional properties of the plugin like its output name
PluginProperties(${PLUGIN_NAME} "_debug" "${DREAM3D_VERSION}"
                "${DREAM3D_BINARY_DIR}" "${CMP_PLUGIN_LIST_FILE}")

# --------------------------------------------------------------------
# Put back the output directory
if(NOT MSVC)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${DREAM3DProj_BINARY_DIR}/Bin  )
endif()

