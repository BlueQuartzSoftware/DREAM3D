#ifndef _FILTER_MANAGE_H_
#define _FILTER_MANAGE_H_

#include <set>
#include <map>
#include <string>

#include "DREAM3DLib/DREAM3DLib.h"
#include "DREAM3DLib/Common/DREAM3DSetGetMacros.h"
#include "DREAM3DLib/Common/Constants.h"
#include "DREAM3DLib/Common/AbstractFilter.h"

#include "FilterWidgets/QFilterWidget.h"
#include "FilterWidgets/DREAM3DFilterHeaders.h"
#include "FilterWidgets/FilterWidgetsHeaders.h"



class @FILTERMANAGER_CLASS_NAME@
{
    
  public:
    DREAM3D_SHARED_POINTERS(@FILTERMANAGER_CLASS_NAME@);
    DREAM3D_STATIC_NEW_MACRO(@FILTERMANAGER_CLASS_NAME@);
    DREAM3D_TYPE_MACRO(@FILTERMANAGER_CLASS_NAME@);

    virtual ~@FILTERMANAGER_CLASS_NAME@();

    typedef std::map<std::string, std::set<std::string> >  FilterMapType;
    typedef std::set<std::string>  StringSetType;
    
    const FilterMapType& getFilterMap();
    
    
    QFilterWidget* getFilterWidget(const std::string &group, const std::string &filter);


  protected:
    @FILTERMANAGER_CLASS_NAME@();

  private:
    std::map<std::string, std::set<std::string> > m_FilterMap;

    @FILTERMANAGER_CLASS_NAME@(const @FILTERMANAGER_CLASS_NAME@&); // Copy Constructor Not Implemented
    void operator=(const @FILTERMANAGER_CLASS_NAME@&); // Operator '=' Not Implemented
    
};


#endif