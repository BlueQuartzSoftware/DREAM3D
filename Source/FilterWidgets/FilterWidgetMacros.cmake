

function(GenerateFilterWidgets)
    set(options )
    set(oneValueArgs PLUGIN_NAME FILTER_GROUP INCLUDE_PATH BINARY_DIR SOURCE_DIR)
    set(multiValueArgs FILTER_HEADERS FILTER_SOURCES WIDGET_GEN_HDRS WIDGET_GEN_SRCS)
    cmake_parse_arguments( WIG "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN} )
    
 #   message(STATUS "WIG_FILTER_GROUP: ${WIG_FILTER_GROUP}")

    set( FILTER_HEADERS "")
    # --------------------------------------------------------------------
    #
    # --------------------------------------------------------------------
    Macro(__WidgetGeneration DirName qrcGroupName sources)
        set( WIDGET_GEN_HDRS "")
        set( WIDGET_GEN_SRCS "")
        set(group ${DirName})
        file(APPEND ${CodeGeneratorFile} "//----- ${WIG_FILTER_GROUP} --------------- \n")
        file(APPEND ${HtmlDocQrcFile} "\n")
        # Make sure this directory is created.
        file(MAKE_DIRECTORY ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}Widgets)
        set(DirName ${DirName})

        foreach(file ${sources})
            get_filename_component(name ${file} NAME_WE)
            message(STATUS "  Generating Widget For ${name}")
            if (NOT EXISTS ${FilterWidgetsLib_SOURCE_DIR}/${WIG_FILTER_GROUP}Widgets/Q${name}Widget.h )
                set(WIDGET_GEN_HDRS ${WIDGET_GEN_HDRS} ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}Widgets/Q${name}Widget.h)
                set(WIDGET_GEN_SRCS ${WIDGET_GEN_SRCS} ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}Widgets/Q${name}Widget.cpp)
                if ( NOT EXISTS ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}Widgets/Q${name}Widget.h)
                    set(GENERATED_MOC_SOURCE_FILE "moc_Q${name}Widget.cpp")
                    configure_file(${FilterWidgetsLib_SOURCE_DIR}/QFilterWidget_Template.h.in
                                  ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}Widgets/Q${name}Widget.h)
                    configure_file(${FilterWidgetsLib_SOURCE_DIR}/QFilterWidget_Template.cpp.in
                                  ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}Widgets/Q${name}Widget.cpp)
                endif()
            endif()

            set(FILTER_HEADERS "${FILTER_HEADERS}#include \"${WIG_INCLUDE_PATH}/${name}.h\"\n")
            file(APPEND ${HtmlDocQrcFile} "<file>${qrcGroupName}/${name}.html</file>\n")
            file(APPEND ${CodeGeneratorFile} "  createHeaderFile<${name}>(\"${WIG_FILTER_GROUP}\", \"${name}\");\n")
            file(APPEND ${CodeGeneratorFile} "  createSourceFile<${name}>(\"${WIG_FILTER_GROUP}\", \"${name}\");\n")
            file(APPEND ${CodeGeneratorFile} "  createHTMLFile<${name}>(\"${WIG_FILTER_GROUP}\", \"${name}\");\n\n")

            file(APPEND ${RegisterKnownFilterWidgetsFile} "   QFilterWidgetFactory<Q${name}Widget>::Pointer q${name}WidgetFactory = QFilterWidgetFactory<Q${name}Widget>::New(); \n")
            file(APPEND ${RegisterKnownFilterWidgetsFile} "   FilterWidgetManager::Instance()->addFilterWidgetFactory(\"${name}\",q${name}WidgetFactory); \n\n")

            file(APPEND ${AllFilterWidgetsHeaderFile} "#include \"${WIG_FILTER_GROUP}Widgets/Q${name}Widget.h\"\n")
        endforeach()
        
        #message(STATUS "WIDGET_GEN_HDRS: ${WIDGET_GEN_HDRS}")
        set( ${WIG_WIDGET_GEN_HDRS} ${WIDGET_GEN_HDRS} PARENT_SCOPE)
        set( ${WIG_WIDGET_GEN_SRCS} ${WIDGET_GEN_SRCS} PARENT_SCOPE)
    endMacro()
    


    # --------------------------------------------------------------------
    # Create a File that will be used to generate a program that itself generates a
    # QFilterWidget derived header for each of the filters based on thier exposed
    # filter options
    set(CodeGeneratorFile  ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}/CodeGenerator.h)
    file(WRITE ${CodeGeneratorFile} "")

    # --------------------------------------------------------------------
    # We are going to generate this file in the binary directory but not
    # really use it currently. If you need to update the FilterDocs.qrc file
    # then you can copy this generated file over the file that is in the source
    # directory
    set(HtmlDocQrcFile ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}/FilterDocs_Auto.qrc)
    file(WRITE ${HtmlDocQrcFile} "<!-- This file is autogenerated during the CMake run so any new filters should get auto-added to this file.  -->\n")
    file(APPEND ${HtmlDocQrcFile} "<!-- DO NOT EDIT THIS FILE. IT WILL BE OVER WRITTEN THE NEXT TIME CMAKE IS RUN  -->\n")
    file(APPEND ${HtmlDocQrcFile} "<!DOCTYPE RCC>\n<RCC version=\"1.0\">\n<qresource>\n")


    # --------------------------------------------------------------------
    # Create a File that has all the headers for the various Filter Widgets
    set(AllFilterWidgetsHeaderFile ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}/FilterWidgetHeaders.h)
    #file(WRITE ${AllFilterWidgetsHeaderFile} "#ifndef _ALLFilterWidgetsLib_H_\n#define _ALLFilterWidgetsLib_H_\n")
    file(WRITE ${AllFilterWidgetsHeaderFile} "")

    # --------------------------------------------------------------------
    # Create a File that will register all of the DREAM3D Filters
    set(RegisterKnownFilterWidgetsFile ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}/RegisterKnownFilterWidgets.cpp)
    file(WRITE ${RegisterKnownFilterWidgetsFile} "#include \"PipelineBuilder/FilterWidgetManager.h\"\n")
    file(APPEND ${RegisterKnownFilterWidgetsFile} "#include \"${WIG_FILTER_GROUP}/FilterWidgetHeaders.h\"\n\n")
    file(APPEND ${RegisterKnownFilterWidgetsFile} "\nvoid ${WIG_PLUGIN_NAME}::registerFilterWidgets()\n{\n")

    set(ONLY_FILTERS 1)
    __WidgetGeneration(${WIG_PLUGIN_NAME} ${WIG_PLUGIN_NAME} "${WIG_FILTER_HEADERS}")


    file(APPEND ${RegisterKnownFilterWidgetsFile} "\n }\n")
    #file(APPEND ${RegisterKnownFilterWidgetsFile} "\n}\n}\n #endif")

    file(APPEND ${HtmlDocQrcFile} "</qresource>\n</RCC>\n")

    # Read the file back into a string so we can configure our file

    file(READ ${RegisterKnownFilterWidgetsFile} QFILTERWIDGET_FACTORY_SOURCE)
    file(READ ${CodeGeneratorFile} CODE_GEN_FILTER_FUNCTION)
    # Remove the temp files that we no longer need
    file(REMOVE ${CodeGeneratorFile})
    #file(REMOVE ${AllFilterWidgetsHeaderFile})

    # --------------------------------------------------------------------
    # Create our custom executable that will generate most of our QFilterWidget
    # classes from information stored in the Filters themselves.
    set(FILTER_WIDGETS_TEMP_DIR ${WIG_BINARY_DIR}/Temp)
    set(FILTER_WIDGETS_BINARY_DIR ${WIG_BINARY_DIR})
    set(FILTER_WIDGETS_SOURCE_DIR ${WIG_SOURCE_DIR})
    set(FILTER_WIDGETS_DOCS_DIR ${WIG_SOURCE_DIR}/Documentation)
    set(FILTER_INCLUDE_PREFIX "")
    file(MAKE_DIRECTORY ${WIG_BINARY_DIR}/Temp)
    configure_file( ${FilterWidgetsLib_SOURCE_DIR}/FilterWidgetsCodeGen.h.in
                    ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}/FilterWidgetCodeGen.h)
    add_executable(${WIG_PLUGIN_NAME}_CodeGen  ${FilterWidgetsLib_SOURCE_DIR}/FilterWidgetCodeGen.cpp
                                               ${WIG_BINARY_DIR}/${WIG_FILTER_GROUP}/FilterWidgetCodeGen.h
                                               ${WIG_FILTER_SOURCES} )
    target_link_libraries(${WIG_PLUGIN_NAME}_CodeGen  MXA EbsdLib DREAM3DLib)


    # Now run the code to generate the header files which will over write the place
    # holder files that were generated from above
    add_custom_command(TARGET ${WIG_PLUGIN_NAME}_CodeGen POST_BUILD
                        COMMAND $<TARGET_FILE:${WIG_PLUGIN_NAME}_CodeGen> )

endfunction()
