///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, mjackson
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
//  This code was written under United States Air Force Contract number
//                           FA8650-04-C-5229
//
///////////////////////////////////////////////////////////////////////////////
#ifndef _MXA_CONFIGURATION_H__
#define _MXA_CONFIGURATION_H__

/* This file is automatically generated. Do NOT Edit this file */

#cmakedefine AIM_USE_SSE

#if defined (_MSC_VER)
#define MXA_HAVE_INTRIN_H @HAVE_INTRIN_H@
#endif

/* Did we compile with HDF5 support */
#define MXA_HDF5_SUPPORT @MXA_HDF5_SUPPORT@

/* Are we using HDF5 primitives in some of the code sources */
#cmakedefine MXA_USE_HDF5_PRIMITIVE_TYPES @MXA_USE_HDF5_PRIMITIVE_TYPES@

/* Are we using MXA types and classes in the H5Lite methods */
#cmakedefine H5LITE_USE_MXA_CONSTRUCTS @H5LITE_USE_MXA_CONSTRUCTS@

/* Are we compiling Tiff support using an external libTiff */
#define MXA_TIFF_SUPPORT @MXA_TIFF_SUPPORT@

/* Are we compiling the VTK<-->HDF5 bridge code */
#define HDF5_VTK_BRIDGE @HDF5_VTK_BRIDGE@

/* Are we compiling with XML support */
#define MXA_XML_SUPPORT @MXA_XML_SUPPORT@

/* Do we have the "gettimeofday" function */
#cmakedefine HAVE_TIME_GETTIMEOFDAY @HAVE_TIME_GETTIMEOFDAY@

/* Do we the the sys/time.h getttimeofday function */
#cmakedefine HAVE_SYS_TIME_GETTIMEOFDAY @HAVE_SYS_TIME_GETTIMEOFDAY@

/* Define to 1 when MXADataModel is built as a dynamic library (All platforms)*/
#cmakedefine MXA_BUILT_AS_DYNAMIC_LIB @MXA_BUILT_AS_DYNAMIC_LIB@

/* What system is the library running */
#define MXADATAMODEL_SYSTEM "@CMAKE_SYSTEM@"

/* What is the name of our FileReader Class */
#define MXAFILEREADER_CLASS_NAME MXAFileReader64

/* What is the name of our File Writer Class */
#define MXAFILEWRITER_CLASS_NAME MXAFileWriter64

/* Should we use Boost Shared_Pointer Wrapped strings*/
#cmakedefine MXA_USE_SHARED_STRINGS @MXA_USE_SHARED_STRINGS@

/* The Following include MUST appear AFTER MXA_BUILT_AS_DYNAMIC_LIB has been defined */
#include <MXA/Common/DLLExport.h>

/*
 * The below code was adapted from the Visualization Toolkit project.
 * Further information on VTK can be found below and at www.vtk.org
 */
/*=========================================================================

  Program:   Visualization Toolkit
  Module:    $RCSfile: MXAConfiguration.h.in,v $

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/


/* This header is configured by MXADataModel's build process.  */

/*--------------------------------------------------------------------------*/
/* Platform Features                                                        */

/* Byte order.  */
/* All compilers that support Mac OS X define either __BIG_ENDIAN__ or
   __LITTLE_ENDIAN__ to match the endianness of the architecture being
   compiled for. This is not necessarily the same as the architecture of the
   machine doing the building. In order to support Universal Binaries on
   Mac OS X, we prefer those defines to decide the endianness.
   On other platforms we use the result of the TRY_RUN. */
#if !defined(__APPLE__)
 #cmakedefine MXA_WORDS_BIGENDIAN
#elif defined(__BIG_ENDIAN__)
# define MXA_WORDS_BIGENDIAN
#endif

/* Threading system.  */
#cmakedefine MXA_USE_PTHREADS
#cmakedefine MXA_USE_SPROC
#cmakedefine MXA_HP_PTHREADS
#cmakedefine MXA_USE_WIN32_THREADS

/* Size of fundamental data types.  */
/* Mac OS X uses two data models, ILP32 (in which integers, long integers,
   and pointers are 32-bit quantities) and LP64 (in which integers are 32-bit
   quantities and long integers and pointers are 64-bit quantities). In order
   to support Universal Binaries on Mac OS X, we rely on this knowledge
   instead of testing the sizes of the building machine.
   On other platforms we use the result of the TRY_RUN. */
#if !defined(__APPLE__)
# define MXA_SIZEOF_CHAR   @MXA_SIZEOF_CHAR@
# define MXA_SIZEOF_SHORT  @MXA_SIZEOF_SHORT@
# define MXA_SIZEOF_INT    @MXA_SIZEOF_INT@
# define MXA_SIZEOF_LONG   @MXA_SIZEOF_LONG@
# define MXA_SIZEOF_FLOAT  @MXA_SIZEOF_FLOAT@
# define MXA_SIZEOF_DOUBLE @MXA_SIZEOF_DOUBLE@
#else
# define MXA_SIZEOF_CHAR   1
# define MXA_SIZEOF_SHORT  2
# define MXA_SIZEOF_INT    4
# if defined(__LP64__) && __LP64__
#  define MXA_SIZEOF_LONG  8
# else
#  define MXA_SIZEOF_LONG  4
# endif
# define MXA_SIZEOF_FLOAT  4
# define MXA_SIZEOF_DOUBLE 8
#endif

/* Define size of long long and/or __int64 bit integer type only if the type
   exists.  */
#if !defined(__APPLE__)
 #cmakedefine MXA_SIZEOF_LONG_LONG @MXA_SIZEOF_LONG_LONG@
#else
 #cmakedefine MXA_SIZEOF_LONG_LONG 8
#endif
#cmakedefine MXA_SIZEOF___INT64   @MXA_SIZEOF___INT64@

/* Whether types "long long" and "__int64" are enabled.  If a type is
   enabled then it is a unique fundamental type.  */
#cmakedefine MXA_TYPE_USE_LONG_LONG
#cmakedefine MXA_TYPE_USE___INT64

/* Some properties of the available types.  */
#cmakedefine MXA_TYPE_SAME_LONG_AND___INT64
#cmakedefine MXA_TYPE_SAME_LONG_LONG_AND___INT64
#cmakedefine MXA_TYPE_CONVERT_UI64_TO_DOUBLE

/* Whether type "char" is signed (it may be signed or unsigned).  */
#define MXA_TYPE_CHAR_IS_SIGNED @MXA_TYPE_CHAR_IS_SIGNED@


/*--------------------------------------------------------------------------*/
/* MXA Platform Configuration                                               */


/* Whether mxaIdType is a 64-bit integer type (or a 32-bit integer type).  */
#cmakedefine MXA_USE_64BIT_IDS

/* This section is for methods that need information about files and
* directories from the files system. Note that we only should be supporting
* 64 bit file systems */
#include <sys/stat.h>
#if defined (_WIN32)
#ifndef NOMINMAX
#define NOMINMAX
#endif
#include <windows.h>
#define MXA_STATBUF    struct _stati64   // non-ANSI defs
#define MXA_STATBUF4TSTAT  struct _stati64   // non-ANSI defs
#define MXA_STAT     ::_stati64
#define MXA_FSTAT    ::_fstati64

#define MXA_STAT_REG   _S_IFREG
#define MXA_STAT_DIR   _S_IFDIR
#define MXA_STAT_MASK    _S_IFMT
#if defined(_S_IFLNK)
#  define MXA_STAT_LNK   _S_IFLNK
#endif

#else

#define MXA_STATBUF    struct stat64
#define MXA_STATBUF4TSTAT  struct stat64
#define MXA_STAT     ::stat64
#define MXA_FSTAT    ::fstat64

#define MXA_STAT_REG   S_IFREG
#define MXA_STAT_DIR   S_IFDIR
#define MXA_STAT_MASK    S_IFMT
#define MXA_STAT_LNK   S_IFLNK

#endif

/* This next section I put here to help out when using NMake based build system
 *  with Eclipse CDT. You have to be working in Eclipse CDT for any of these to
 *  become active AND you need to add ECLIPSE_NMAKE as a symbol into the project
 *  properties.
 */
#cmakedefine NMAKE_GENERATOR @NMAKE_GENERATOR@
#if defined (NMAKE_GENERATOR) && defined (ECLIPSE_NMAKE)
#define _MSC_VER @MSVC_VERSION@
#endif
#endif /*_MXA_CONFIGURATION_H__*/
