/*
 * Your License or Copyright Information can go here
 */

#include "@ClassName@.h"

#include <QtCore/QString>

#include "@PluginName@/@PluginName@Constants.h"

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
@ClassName@::@ClassName@() :
  AbstractFilter()
{
  setupFilterParameters();
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
@ClassName@::~@ClassName@()
{
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::setupFilterParameters()
{
  FilterParameterVector parameters;
  /* Place all your option initialization code here */
  /* For String input use this code */
  /* {
    FilterParameter::Pointer parameter = FilterParameter::New();
    parameter->setHumanLabel("Eulers Array");
    parameter->setPropertyName("CellEulerAnglesArrayName");
    parameter->setWidgetType(FilterParameterWidgetType::SingleArraySelectionWidget);
    parameter->setValueType("QString");
    parameter->setUnits("");
    parameters.push_back(parameter);
  }
  */
  setFilterParameters(parameters);
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::readFilterParameters(AbstractFilterParametersReader* reader, int index)
{
  reader->openFilterGroup(this, index);
  /*
   Place code in here that will read the parameters from a file
   setOutputFile( reader->readValue("OutputFile", getOutputFile() ) );
   */
  reader->closeFilterGroup();
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
int @ClassName@::writeFilterParameters(AbstractFilterParametersWriter* writer, int index)
{
  writer->openFilterGroup(this, index);
  /* Place code that will write the inputs values into a file. reference the AbstractFilterParametersWriter class for the proper API to use. */
  /*  writer->writeValue("OutputFile", getOutputFile() ); */
  writer->closeFilterGroup();
  return ++index; // we want to return the next index that was just written to
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::dataCheck()
{
  setErrorCondition(0);

  /* Example code for preflighting looking for a valid string for the output file
   * but not necessarily the fact that the file exists: Example code to make sure
   * we have something in a string before proceeding.*/
  /*
  if (m_OutputFile.empty() == true)
  {
    QString ss = QObject::tr("Output file name was not set").arg(getHumanLabel());
    setErrorCondition(-1);
    notifyErrorMessage(getHumanLabel(), ss, -1);
    return;
  }
  */
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::preflight()
{
  /* Place code here that sanity checks input arrays and input values. Look at some
  * of the other DREAM3DLib/Filters/.cpp files for sample codes */
  emit preflightAboutToExecute();
  emit updateFilterParameters(this);
  dataCheck();
  emit preflightExecuted();
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getCompiledLibraryName()
{
  return @PluginName@::@PluginName@BaseName;
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getGroupName()
{
  return "@PluginName@";
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getHumanLabel()
{
  return "@ClassName@";
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getSubGroupName()
{
  return "Misc";
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::execute()
{
  int err = 0;
  // typically run your dataCheck function to make sure you can get that far and all your variables are initialized
  dataCheck();
  // Check to make sure you made it through the data check. Errors would have been reported already so if something
  // happens to fail in the dataCheck() then we simply return
  if(getErrorCondition() < 0) { return; }
  setErrorCondition(0);

  /* Place all your code to execute your filter here. */

  /* If some error occurs this code snippet can report the error up the call chain*/
  if (err < 0)
  {
    QString ss = QObject::tr("Some error message");
    setErrorCondition(-99999999);
    notifyErrorMessage(getHumanLabel(), ss, getErrorCondition());
    return;
  }

  /* Let the GUI know we are done with this filter */
  notifyStatusMessage(getHumanLabel(), "Import Complete");
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
AbstractFilter::Pointer @ClassName@::newFilterInstance(bool copyFilterParameters)
{
  /*
  * write code to optionally copy the filter parameters from the current filter into the new instance
  */
  @ClassName@::Pointer filter = @ClassName@::New();
  if(true == copyFilterParameters)
  {
    /* filter->setOutputFile( getOutputFile() ); */
  }
  return filter;
}

