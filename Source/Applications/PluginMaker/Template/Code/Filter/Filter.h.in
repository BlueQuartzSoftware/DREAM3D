/*
 * Your License or Copyright Information can go here
 */

#ifndef @PluginName@Filter_H_
#define @PluginName@Filter_H_

#include <string>

#include "DREAM3DLib/DREAM3DLib.h"
#include "DREAM3DLib/Common/DREAM3DSetGetMacros.h"
#include "DREAM3DLib/Common/IDataArray.h"

#include "DREAM3DLib/Common/AbstractFilter.h"
#include "DREAM3DLib/Common/DataContainer.h"

/**
 * @class @PluginName@Filter @PluginName@Filter.h DREAM3DLib/SyntheticBuilderFilters/@PluginName@Filter.h
 * @brief
 * @author
 * @date Nov 19, 2011
 * @version 1.0
 */
class @PluginName@Filter : public AbstractFilter
{
  public:
    DREAM3D_SHARED_POINTERS(@PluginName@Filter);
    DREAM3D_STATIC_NEW_MACRO(@PluginName@Filter);
    DREAM3D_TYPE_MACRO_SUPER(@PluginName@Filter, AbstractFilter);

    virtual ~@PluginName@Filter();

    /* Place your input parameters here. You can use some of the DREAM3D Macros if you want to
    * DREAM3D_INSTANCE_PROPERTY(float, XRes)
    * DREAM3D_INSTANCE_STRING_PROPERTY(OutputFile)
    */
    

    /**
    * @brief This returns the group that the filter belonds to. You can select
    * a different group if you want. The string returned here will be displayed
    * in the GUI for the filter
    */
    virtual const std::string getGroupName() { return "@PluginName@"; }
    
    /**
    * @brief This returns a string that is displayed in the GUI. It should be readable
    * and understandable by humans.
    */
    virtual const std::string getHumanLabel() { return "@PluginName@ Filter"; }
    
    /**
    * @brief This method will instantiate all the end user settable options/parameters
    * for this filter
    */
    virtual void setupFilterOptions();
    
    /**
    * @brief This method will write the options to a file
    * @param writer The writer that is used to write the options to a file
    */
    virtual void writeFilterOptions(AbstractFilterOptionsWriter* writer);

	 /**
    * @brief Reimplemented from @see AbstractFilter class
    */
    virtual void execute();
    
    /**
    * @brief This function runs some sanity checks on the DataContainer and inputs 
    * in an attempt to ensure the filter can process the inputs.
    */
    virtual void preflight();

  protected:
    @PluginName@Filter();

    /**
    * @brief Checks for the appropriate parameter values and availability of 
    * arrays in the data container
    * @param preflight
    * @param voxels The number of voxels
    * @param fields The number of fields
    * @param ensembles The number of ensembles
    */
    void dataCheck(bool preflight, size_t voxels, size_t fields, size_t ensembles);

  private:

    @PluginName@Filter(const @PluginName@Filter&); // Copy Constructor Not Implemented
    void operator=(const @PluginName@Filter&); // Operator '=' Not Implemented
};

#endif /* @PluginName@Filter_H_ */
