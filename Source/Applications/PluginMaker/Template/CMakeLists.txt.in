#--////////////////////////////////////////////////////////////////////////////
#-- Your License or copyright can go here
#--////////////////////////////////////////////////////////////////////////////

project(@PluginName@Plugin)

set(PLUGIN_NAME @PluginName@Plugin)

# --------------------------------------------------------------------
# Look for Qt 4 as we need it for the plugin GUI to be generated
if(NOT QT4_FOUND)
    message(FATAL_ERROR "Qt 4 is Needed for this @PluginName@Plugin.")
endif()
include( ${QT_USE_FILE} )


set(@PluginName@Plugin_Project_SRCS "")

include(${DREAM3DProj_SOURCE_DIR}/Source/DREAM3DLib/DREAM3DLibMacros.cmake)

#-------
# Start writing this header file
set(AllFiltersHeaderFile ${@PluginName@Plugin_BINARY_DIR}/@PluginName@Filters/@PluginName@Filters.h)
file(WRITE ${AllFiltersHeaderFile} "#ifndef _@PluginName@_Filters_H_\n#define _@PluginName@_Filters_H_\n\n")
# --------------------------------------------------------------------
# Create a File that will be used to generate a program that itself generates a
# QFilterWidget derived header for each of the filters based on thier exposed
# filter options
set(CodeGeneratorFile  ${@PluginName@Plugin_BINARY_DIR}/@PluginName@CodeGenerator.h)
file(WRITE ${CodeGeneratorFile} "")
# --------------------------------------------------------------------
# We are going to generate this file in the binary directory but not
# really use it currently. If you need to update the FilterDocs.qrc file
# then you can copy this generated file over the file that is in the source
# directory
set(md5_filterdocs_current "0")
#if(EXISTS ${@PluginName@Plugin_SOURCE_DIR}/Documentation/Filters/FilterDocs.qrc)
#  file(MD5 ${@PluginName@Plugin_SOURCE_DIR}/Documentation/Filters/FilterDocs.qrc md5_filterdocs_current)
#endif()
set(HtmlDocQrcFile ${@PluginName@Plugin_SOURCE_DIR}/Documentation/Filters/FilterDocs.qrc)
file(WRITE ${HtmlDocQrcFile} "<!-- This file is autogenerated during the CMake run so any new filters should get auto-added to this file.  -->\n")
file(APPEND ${HtmlDocQrcFile} "<!-- DO NOT EDIT THIS FILE. IT WILL BE OVER WRITTEN THE NEXT TIME CMAKE IS RUN  -->\n")
file(APPEND ${HtmlDocQrcFile} "<!DOCTYPE RCC>\n<RCC version=\"1.0\">\n  <qresource>\n")
#file(APPEND ${HtmlDocQrcFile} "    <file>document.css</file>\n    <file>catalog.css</file>\n    <file>index.html</file>\n")
# --------------------------------------------------------------------
# Create a File that has all the headers for the various Filter Widgets
set(AllFilterWidgetsHeaderFile ${@PluginName@Plugin_BINARY_DIR}/FilterWidgetHeaders.h)
file(WRITE ${AllFilterWidgetsHeaderFile} "#ifndef _ALL@PluginName@Plugin_H_\n#define _ALL@PluginName@Plugin_H_\n")
# --------------------------------------------------------------------
# Create a File that will register all of the DREAM3D Filters
set(RegisterKnownFilterWidgetsFile ${@PluginName@Plugin_BINARY_DIR}/@PluginName@Filters/RegisterKnownFilterWidgets.cpp)
file(WRITE ${RegisterKnownFilterWidgetsFile} "#include \"PipelineBuilder/FilterWidgetManager.h\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "#include \"QFilterWidgetFactory.hpp\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "#include \"FilterWidgetHeaders.h\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "\nvoid @PluginName@Plugin::registerFilterWidgets()\n{\n")
# --------------------------------------------------------------------
# Generate a file with all of our MOC'ed sources and  headers
set(FilterWidget_GEN_HDRS_File ${@PluginName@Plugin_BINARY_DIR}/FilterWidget_GEN_HDRS_File.cmake)
set(FilterWidget_GEN_SRCS_File ${@PluginName@Plugin_BINARY_DIR}/FilterWidget_GEN_SRCS_File.cmake)
file(WRITE ${FilterWidget_GEN_HDRS_File})
file(WRITE ${FilterWidget_GEN_SRCS_File})

set(Project_SRCS "")

# Add in our Filter classes
include(${@PluginName@Plugin_SOURCE_DIR}/@PluginName@Filters/SourceList.cmake)


set(@PluginName@Plugin_Project_SRCS ${Project_SRCS})

#-----------------------------------------------------
# Close up all the files that we just generated
file(APPEND ${AllFiltersHeaderFile} "\n#endif\n")
file(APPEND ${AllFilterWidgetsHeaderFile} "\n#endif\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "\n }\n")
file(APPEND ${HtmlDocQrcFile} "  </qresource>\n</RCC>\n")



#--------------------------
include_directories( ${HDF5_INCLUDE_DIR} )
include_directories( ${PROJECT_CODE_DIR} )
include_directories( ${QtSupport_BINARY_DIR} )
include_directories( ${FilterWidgetsLib_SOURCE_DIR} )
include_directories( ${@PluginName@Plugin_BINARY_DIR} )
include_directories( ${@PluginName@Plugin_SOURCE_DIR}/.. )
include_directories( ${@PluginName@Plugin_SOURCE_DIR})

# ******************************************************************************
# Create our custom executable that will generate most of our QFilterWidget
# classes from information stored in the Filters themselves.
# Read the file back into a string so we can configure our file
file(READ ${RegisterKnownFilterWidgetsFile} QFILTERWIDGET_FACTORY_SOURCE)
file(READ ${CodeGeneratorFile} CODE_GEN_FILTER_FUNCTION)
file(READ ${FilterWidget_GEN_HDRS_File} @PluginName@Widget_GEN_HDRS)
file(READ ${FilterWidget_GEN_SRCS_File} @PluginName@Widget_GEN_SRCS)

# Remove the temp files that we no longer need
file(REMOVE ${CodeGeneratorFile})
file(REMOVE ${FilterWidget_GEN_HDRS_File})
file(REMOVE ${FilterWidget_GEN_SRCS_File})


set(FILTER_HEADERS "#include \"${AllFiltersHeaderFile}\"")
set(FILTER_WIDGETS_TEMP_DIR ${@PluginName@Plugin_BINARY_DIR}/Temp)
set(FILTER_WIDGETS_BINARY_DIR ${@PluginName@Plugin_BINARY_DIR}/@PluginName@)
set(FILTER_WIDGETS_SOURCE_DIR ${@PluginName@Plugin_SOURCE_DIR})
set(FILTER_WIDGETS_DOCS_DIR ${@PluginName@Plugin_SOURCE_DIR}/Documentation/Filters)
set(FILTER_INCLUDE_PREFIX "")
file(MAKE_DIRECTORY ${@PluginName@Plugin_BINARY_DIR}/Temp)
configure_file( ${FilterWidgetsLib_SOURCE_DIR}/FilterWidgetsCodeGen.h.in
                ${@PluginName@Plugin_BINARY_DIR}/FilterWidgetCodeGen.h)


add_executable(@PluginName@WidgetCodeGen  ${FilterWidgetsLib_SOURCE_DIR}/FilterWidgetCodeGen.cpp
                                            ${@PluginName@Plugin_BINARY_DIR}/FilterWidgetCodeGen.h
                                            ${@PluginName@Plugin_Project_SRCS}
                                            )
target_link_libraries(@PluginName@WidgetCodeGen MXA EbsdLib DREAM3DLib)


# Now run the code to generate the header files which will over write the place
# holder files that were generated from above
add_custom_command(TARGET @PluginName@WidgetCodeGen POST_BUILD
                    COMMAND $<TARGET_FILE:@PluginName@WidgetCodeGen> )
# ******************************************************************************


add_definitions(-DDREAM3D_USE_QT)
if (MSVC)   # Do not generate manifests for the plugins - caused issues loading plugins
  set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /MANIFEST:NO")
endif()


# --------------------------------------------------------------------
# These are the NON-Filter but Qt derived sources of the plugin. In case you have
# additional Qt source files that you need compiled.
set(@PluginName@Plugin_HDRS
  ${PROJECT_SOURCE_DIR}/@PluginName@Plugin.h
)

set(@PluginName@Plugin_SRCS
 ${PROJECT_SOURCE_DIR}/@PluginName@Plugin.cpp
)
cmp_IDE_SOURCE_PROPERTIES( "@PluginName@/" "${@PluginName@Plugin_HDRS}" "${@PluginName@Plugin_SRCS}" "0")


# --------------------------------------------------------------------
# We need to run Qt's moc system on our Qt based files (Anything deriving from QObject)
# This cmake code sets up moc to be run.
QT4_WRAP_CPP( @PluginName@Plugin_Generated_MOC_SRCS ${@PluginName@Widget_GEN_HDRS})
QT4_WRAP_CPP( @PluginName@Plugin_MOC_SRCS ${@PluginName@Plugin_HDRS} )

# These generated moc files will be #include in the FilterWidget source file that
# are generated so we need to tell the build system to NOT compile these files
set_source_files_properties( ${@PluginName@Plugin_Generated_MOC_SRCS} PROPERTIES HEADER_FILE_ONLY TRUE)
set_source_files_properties( ${@PluginName@Plugin_MOC_SRCS} PROPERTIES HEADER_FILE_ONLY TRUE)

# --------------------------------------------------------------------
# -- Create a Qt Resource header file of the documentation html files
QT4_ADD_RESOURCES( @PluginName@Plugin_Generated_RC_SRCS "${HtmlDocQrcFile}"  )

# --------------------------------------------------------------------
# Group all the generated source files in IDE's that support it. Makes it clear
# to the user of the IDE what is generated and what is not.
cmp_IDE_SOURCE_PROPERTIES("Generated" "${@PluginName@Plugin_Generated_RC_SRCS};${@PluginName@Plugin_Generated_MOC_SRCS};${@PluginName@Plugin_MOC_SRCS}" "${@PluginName@Plugin_GEN_HDRS};${@PluginName@Plugin_GEN_SRCS}" "0")

# --------------------------------------------------------------------
# Create an install rule for the headers. If you do NOT want your headers
# installed for a deployment to other machines then change the PROJECT_INSTALL_HEADERS
# to a Zero
if ( ${PROJECT_INSTALL_HEADERS} EQUAL 1 )
    INSTALL (FILES ${@PluginName@Plugin_HDRS}
            DESTINATION include/${PLUGIN_NAME}/@PluginName@
            COMPONENT Headers   )
endif()


set (@PluginName@Plugin_Project_SRCS
   ${@PluginName@Plugin_Project_SRCS}
   ${@PluginName@Plugin_HDRS}
   ${@PluginName@Plugin_SRCS}
   ${@PluginName@Widget_GEN_HDRS}
   ${@PluginName@Widget_GEN_SRCS}
   ${@PluginName@Plugin_Generated_MOC_SRCS}
   ${@PluginName@Plugin_MOC_SRCS}
   ${@PluginName@Plugin_Generated_RC_SRCS}
   )

# --------------------------------------------------------------------
# Setup output Directory for the plugin
if(NOT MSVC)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${DREAM3DProj_BINARY_DIR}/Bin/plugins  )
endif()

# --------------------------------------------------------------------
# Add the plugin as a MODULE
add_library(${PLUGIN_NAME} MODULE ${@PluginName@Plugin_Project_SRCS})
# --------------------------------------------------------------------
# Link the plugin with other DREAM3D Libraries.
target_link_libraries(${PLUGIN_NAME}
                    MXA
                    DREAM3DLib
                    ${QT_QTCORE_LIBRARY}
                    ${QT_QTGUI_LIBRARY}
                    QtSupport
                    PipelineBuilderLib
                    )
# --------------------------------------------------------------------
# Add a dependency on the code generation step to make sure the code is
# generated before we try to compile the plugin
add_dependencies(${PLUGIN_NAME} @PluginName@WidgetCodeGen)

# --------------------------------------------------------------------
# Set some additional properties of the plugin like its output name
PluginProperties(${PLUGIN_NAME} "_debug" "${DREAM3D_VERSION}"
                "${DREAM3D_BINARY_DIR}" "${CMP_PLUGIN_LIST_FILE}")

# --------------------------------------------------------------------
# Put back the output directory
if (NOT MSVC)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${DREAM3DProj_BINARY_DIR}/Bin  )
endif()

