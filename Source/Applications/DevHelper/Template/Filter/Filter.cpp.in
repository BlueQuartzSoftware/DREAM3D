/*
 * Your License or Copyright can go here
 */

#include "@ClassName@.h"

#include "SIMPLib/Common/Constants.h"
#include "SIMPLib/FilterParameters/AbstractFilterParametersReader.h"
#include "SIMPLib/FilterParameters/AbstractFilterParametersWriter.h"

@Filter_CPP_Includes@

#include "@PluginName@/@PluginName@Constants.h"
#include "@PluginName@/@PluginName@Version.h"

// Include the MOC generated file for this class
#include "moc_@ClassName@.cpp"

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
@ClassName@::@ClassName@() :
@InitList@
{
  setupFilterParameters();
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
@ClassName@::~@ClassName@()
{
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::setupFilterParameters()
{
  FilterParameterVector parameters;
@SetupFPContents@
  setFilterParameters(parameters);
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::readFilterParameters(AbstractFilterParametersReader* reader, int index)
{
  reader->openFilterGroup(this, index);
@ReadFPContents@
  reader->closeFilterGroup();
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
int @ClassName@::writeFilterParameters(AbstractFilterParametersWriter* writer, int index)
{
  writer->openFilterGroup(this, index);
@WriteFPContents@
  writer->closeFilterGroup();
  return ++index; // we want to return the next index that was just written to
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::dataCheck()
{
  setErrorCondition(0);
@DataCheckContents@
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::preflight()
{
  // These are the REQUIRED lines of CODE to make sure the filter behaves correctly
  setInPreflight(true); // Set the fact that we are preflighting.
  emit preflightAboutToExecute(); // Emit this signal so that other widgets can do one file update
  emit updateFilterParameters(this); // Emit this signal to have the widgets push their values down to the filter
  dataCheck(); // Run our DataCheck to make sure everthing is setup correctly
  emit preflightExecuted(); // We are done preflighting this filter
  setInPreflight(false); // Inform the system this filter is NOT in preflight mode anymore.
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
void @ClassName@::execute()
{
  setErrorCondition(0);
  dataCheck();
  if(getErrorCondition() < 0) { return; }

  if (getCancel() == true) { return; }

  if (getErrorCondition() < 0)
  {
    QString ss = QObject::tr("Some error message");
    setErrorCondition(-99999999);
    notifyErrorMessage(getHumanLabel(), ss, getErrorCondition());
    return;
  }

  notifyStatusMessage(getHumanLabel(), "Complete");
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
AbstractFilter::Pointer @ClassName@::newFilterInstance(bool copyFilterParameters)
{
  @ClassName@::Pointer filter = @ClassName@::New();
  if(true == copyFilterParameters)
  {
    copyFilterParameterInstanceVariables(filter.get());
  }
  return filter;
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getCompiledLibraryName()
{ return @PluginName@Constants::@PluginName@BaseName; }

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getBrandingString()
{
  return "@PluginName@";
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getFilterVersion()
{
  QString version;
  QTextStream vStream(&version);
  vStream <<  @PluginName@::Version::Major() << "." << @PluginName@::Version::Minor() << "." << @PluginName@::Version::Patch();
  return version;
}

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getGroupName()
{ return DREAM3D::FilterGroups::Unsupported; }

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getSubGroupName()
{ return "@PluginName@"; }

// -----------------------------------------------------------------------------
//
// -----------------------------------------------------------------------------
const QString @ClassName@::getHumanLabel()
{ return "@ClassName@"; }

