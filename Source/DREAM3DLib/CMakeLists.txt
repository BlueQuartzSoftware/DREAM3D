#--////////////////////////////////////////////////////////////////////////////
#--
#--  Copyright (c) 2009, Michael A. Jackson. BlueQuartz Software
#--  Copyright (c) 2009, Michael Groeber, US Air Force Research Laboratory
#--  All rights reserved.
#--  BSD License: http://www.opensource.org/licenses/bsd-license.html
#--
#--////////////////////////////////////////////////////////////////////////////

#///////////////////////////////////////////////////////////////////////////////
#// This code was partly written under US Air Force Contract FA8650-07-D-5800
#///////////////////////////////////////////////////////////////////////////////

# set project's name
PROJECT( DREAM3DLib )
cmake_minimum_required(VERSION 2.8.3)

SET (DREAM3DLib_BUILT_AS_DYNAMIC_LIB)
IF (BUILD_SHARED_LIBS)
    SET (DREAM3DLib_BUILT_AS_DYNAMIC_LIB 1)
    IF (WIN32)
        ADD_DEFINITIONS("-DDREAM3DLib_BUILT_AS_DYNAMIC_LIB")
    ENDIF (WIN32)
ENDIF (BUILD_SHARED_LIBS)

option(DREAM3D_DISABLE_MSVC_WARNINGS "Disable some MSVC Compiler warnings" OFF)
IF (DREAM3D_DISABLE_MSVC_WARNINGS)
    add_definitions(-DDREAM3D_DISABLE_MSVC_WARNINGS)
endif()

SET (PROJECT_PREFIX "DREAM3D" CACHE STRING "The Prefix to be used for Preprocessor definitions")
set (PROJECT_INSTALL_HEADERS 0)
#-------------------------------------------------------------------------------
# Include the cmp project to perform all the basic configuration tests for the
# project.
#-------------------------------------------------------------------------------
set (CMP_HEADER_DIR ${DREAM3DLib_BINARY_DIR})
set (CMP_CONFIGURATION_FILE_NAME "DREAM3DConfiguration.h")
set (CMP_TYPES_FILE_NAME "DREAM3DLibTypes.h")
set (CMP_VERSION_HEADER_FILE_NAME "DREAM3DVersion.h")
set (CMP_VERSION_SOURCE_FILE_NAME "DREAM3DVersion.cpp")
set (CMP_TOP_HEADER_FILE "DREAM3DLib.h")
set (CMP_PROJECT_NAMESPACE "${PROJECT_NAME}")
set (CMP_PROJECT_NAME "${PROJECT_NAME}")
set (CMP_ENABLE_PLUGINS "0")
set (CMP_LIB_SEARCH_DIRS "")
set (CMP_GENERATE_VERSION_STRING 1)


INCLUDE (${CMP_SOURCE_DIR}/cmpProject.cmake)
configure_file(${DREAM3DLib_SOURCE_DIR}/DREAM3DConfiguration.h.in
               ${DREAM3DProj_BINARY_DIR}/DREAM3DLib/${CMP_TOP_HEADER_FILE})

cmp_IDE_GENERATED_PROPERTIES("Generated"
                             "${CMP_HEADER_DIR}/${CMP_TOP_HEADER_FILE};${CMP_HEADER_DIR}/${CMP_TYPES_FILE_NAME};${CMP_HEADER_DIR}/${CMP_CONFIGURATION_FILE_NAME};${CMP_HEADER_DIR}/${CMP_VERSION_HEADER_FILE_NAME}"
                             "${CMP_HEADER_DIR}/${CMP_VERSION_SOURCE_FILE_NAME}")

set(Project_SRCS
    ${CMP_HEADER_DIR}/${CMP_TOP_HEADER_FILE}
    ${CMP_HEADER_DIR}/${CMP_TYPES_FILE_NAME}
    ${CMP_HEADER_DIR}/${CMP_CONFIGURATION_FILE_NAME}
    ${CMP_HEADER_DIR}/${CMP_VERSION_HEADER_FILE_NAME}
    ${CMP_HEADER_DIR}/${CMP_VERSION_SOURCE_FILE_NAME}
)

Macro(D3DCompileDir DirName)
    include(${DREAM3DLib_SOURCE_DIR}/${DirName}/SourceList.cmake)
    set (Project_SRCS ${Project_SRCS} ${DREAM3DLib_${DirName}_SRCS} ${DREAM3DLib_${DirName}_HDRS})
endMacro()

# Add in our NON-Filter classes
D3DCompileDir(Common)
D3DCompileDir(DistributionAnalysisOps)
D3DCompileDir(HDF5)
D3DCompileDir(OrientationOps )
D3DCompileDir(ShapeOps )
D3DCompileDir(VTKUtils )

#-------
# Start writing this header file
set(AllFiltersHeaderFile ${DREAM3DLib_BINARY_DIR}/DREAM3DFilters.h)
file(WRITE ${AllFiltersHeaderFile} "#ifndef _DREAM3D_FILTERS_H_\n#define _DREAM3D_FILTERS_H_\n\n")
# --------------------------------------------------------------------
# Create a File that will be used to generate a program that itself generates a
# QFilterWidget derived header for each of the filters based on thier exposed
# filter options
set(CodeGeneratorFile  ${FilterWidgetsLib_BINARY_DIR}/CodeGenerator.h)
file(WRITE ${CodeGeneratorFile} "")
# --------------------------------------------------------------------
# We are going to generate this file in the binary directory but not
# really use it currently. If you need to update the FilterDocs.qrc file
# then you can copy this generated file over the file that is in the source
# directory
set(HtmlDocQrcFile ${DREAM3DProj_SOURCE_DIR}/Documentation/Filters/Generated_FilterDocs.qrc)
file(WRITE ${HtmlDocQrcFile} "<!-- This file is autogenerated during the CMake run so any new filters should get auto-added to this file.  -->\n")
file(APPEND ${HtmlDocQrcFile} "<!-- DO NOT EDIT THIS FILE. IT WILL BE OVER WRITTEN THE NEXT TIME CMAKE IS RUN  -->\n")
file(APPEND ${HtmlDocQrcFile} "<!DOCTYPE RCC>\n<RCC version=\"1.0\">\n  <qresource>\n")
file(APPEND ${HtmlDocQrcFile} "    <file>document.css</file>\n    <file>catalog.css</file>\n    <file>index.html</file>\n")
# --------------------------------------------------------------------
# Create a File that has all the headers for the various Filter Widgets
set(AllFilterWidgetsHeaderFile ${FilterWidgetsLib_BINARY_DIR}/FilterWidgetHeaders.h)
file(WRITE ${AllFilterWidgetsHeaderFile} "#ifndef _ALLFilterWidgetsLib_H_\n#define _ALLFilterWidgetsLib_H_\n")
# --------------------------------------------------------------------
# Create a File that will register all of the DREAM3D Filters
set(RegisterKnownFilterWidgetsFile ${FilterWidgetsLib_BINARY_DIR}/RegisterKnownFilterWidgets.cpp)
file(WRITE ${RegisterKnownFilterWidgetsFile} "#include \"PipelineBuilder/FilterWidgetManager.h\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "#include \"QFilterWidgetFactory.hpp\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "#include \"FilterWidgetHeaders.h\"\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "\nvoid FilterWidgetsLib::RegisterKnownQFilterWidgets()\n{\n")
# --------------------------------------------------------------------
# Generate a file with all of our MOC'ed sources and  headers
set(FilterWidget_GEN_HDRS_File ${FilterWidgetsLib_BINARY_DIR}/FilterWidget_GEN_HDRS_File.cmake)
set(FilterWidget_GEN_SRCS_File ${FilterWidgetsLib_BINARY_DIR}/FilterWidget_GEN_SRCS.cmake)
file(WRITE ${FilterWidget_GEN_HDRS_File})
file(WRITE ${FilterWidget_GEN_SRCS_File})

#-------------------------------------------------------------------------------
# Macro START_FILTER_GROUP
macro(START_FILTER_GROUP filterGroup)
    file(APPEND ${AllFiltersHeaderFile} "\n/* ------ ${filterGroup} --------- */\n")
    file(APPEND ${CodeGeneratorFile} "//----- ${filterGroup} --------------- \n")
    file(APPEND ${HtmlDocQrcFile} "\n    <!-- ***** ${filterGroup} ***** -->\n")
    file(APPEND ${AllFilterWidgetsHeaderFile} "\n/* ------ ${filterGroup} --------- */\n")
    file(APPEND ${RegisterKnownFilterWidgetsFile} "\n    /* ------ ${filterGroup} --------- */\n")
    file(MAKE_DIRECTORY ${FilterWidgetsLib_BINARY_DIR}/${filterGroup}Widgets)
endmacro()

#-------------------------------------------------------------------------------
# Macro ADD_DREAM3D_SUPPORT_HEADER
macro(ADD_DREAM3D_SUPPORT_HEADER filterGroup headerFileName)
    set(Project_SRCS ${Project_SRCS}
                    ${DREAM3DLib_SOURCE_DIR}/${filterGroup}/${headerFileName})
    cmp_IDE_SOURCE_PROPERTIES( "DREAM3DLib/${filterGroup}" "${DREAM3DLib_SOURCE_DIR}/${filterGroup}/${headerFileName}" "" "0")
endmacro()

#-------------------------------------------------------------------------------
# Macro ADD_DREAM3D_FILTER
macro(ADD_DREAM3D_FILTER filterGroup filterName filterDocFile filterDocImages publicFilter)

    set(Project_SRCS ${Project_SRCS}
                    ${DREAM3DLib_SOURCE_DIR}/${filterGroup}/${filterName}.h
                    ${DREAM3DLib_SOURCE_DIR}/${filterGroup}/${filterName}.cpp)
    #--- Organize inside the Visual Studio/Xcode Projects
    cmp_IDE_SOURCE_PROPERTIES( "DREAM3DLib/${filterGroup}" "${DREAM3DLib_SOURCE_DIR}/${filterGroup}/${filterName}.h" "${DREAM3DLib_SOURCE_DIR}/${filterGroup}/${filterName}.cpp" "0")

    #-- Create an Install Rule for the headers
    if ( ${PROJECT_INSTALL_HEADERS} EQUAL 1 )
        INSTALL (FILES ${DREAM3DLib_SOURCE_DIR}/${filterGroup}/${filterName}.h
            DESTINATION include/DREAM3DLib/${filterGroup}
            COMPONENT Headers   )
    endif()

    file (APPEND ${AllFiltersHeaderFile} "#include \"DREAM3DLib/${filterGroup}/${filterName}.h\"\n")

    if ( ${publicFilter} STREQUAL TRUE)
        message(STATUS "  Generating Widget For ${filterName}")
        if (NOT EXISTS ${FilterWidgetsLib_SOURCE_DIR}/${filterGroup}Widgets/Q${filterName}Widget.h )
#            set(FilterWidget_GEN_HDRS ${FilterWidget_GEN_HDRS} ${FilterWidgetsLib_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.h)
            file(APPEND ${FilterWidget_GEN_HDRS_File} "${FilterWidgetsLib_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.h;")
#            set(FilterWidget_GEN_SRCS ${FilterWidget_GEN_SRCS} ${FilterWidgetsLib_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.cpp)
           file(APPEND ${FilterWidget_GEN_SRCS_File} "${FilterWidgetsLib_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.cpp;")
            if ( NOT EXISTS ${FilterWidgetsLib_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.h)
                set(GENERATED_MOC_SOURCE_FILE "moc_Q${name}Widget.cpp")
                configure_file(${FilterWidgetsLib_SOURCE_DIR}/QFilterWidget_Template.h.in
                              ${FilterWidgetsLib_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.h)
                configure_file(${FilterWidgetsLib_SOURCE_DIR}/QFilterWidget_Template.cpp.in
                              ${FilterWidgetsLib_BINARY_DIR}/${filterGroup}Widgets/Q${filterName}Widget.cpp)
            endif()
        endif()


        file(APPEND ${CodeGeneratorFile} "createHeaderFile<${filterName}>(\"${filterGroup}\", \"${filterName}\");\n")
        file(APPEND ${CodeGeneratorFile} "createSourceFile<${filterName}>(\"${filterGroup}\", \"${filterName}\");\n")
        file(APPEND ${CodeGeneratorFile} "createHTMLFile<${filterName}>(\"${filterGroup}\", \"${filterName}\");\n")


        file(APPEND ${AllFilterWidgetsHeaderFile} "#include \"FilterWidgets/${filterGroup}Widgets/Q${filterName}Widget.h\"\n")

        file(APPEND ${HtmlDocQrcFile} "    <file>${filterGroup}/${filterName}.html</file>\n")
        foreach(resource ${filterDocImages})
            file(APPEND ${HtmlDocQrcFile} "    <file>${filterGroup}/${resource}</file>\n")
        endforeach()

        file(APPEND ${RegisterKnownFilterWidgetsFile} "   QFilterWidgetFactory<Q${filterName}Widget>::Pointer q${filterName}WidgetFactory = QFilterWidgetFactory<Q${filterName}Widget>::New(); \n")
        file(APPEND ${RegisterKnownFilterWidgetsFile} "   FilterWidgetManager::Instance()->addFilterWidgetFactory(\"${filterName}\",q${filterName}WidgetFactory); \n\n")

    endif()

endmacro()


# Add in our Filter classes
#include(${DREAM3DLib_SOURCE_DIR}/CustomFilters/SourceList.cmake)
include(${DREAM3DLib_SOURCE_DIR}/GenericFilters/SourceList.cmake)
include(${DREAM3DLib_SOURCE_DIR}/IOFilters/SourceList.cmake)
include(${DREAM3DLib_SOURCE_DIR}/ProcessingFilters/SourceList.cmake)
include(${DREAM3DLib_SOURCE_DIR}/ReconstructionFilters/SourceList.cmake)
include(${DREAM3DLib_SOURCE_DIR}/SamplingFilters/SourceList.cmake)
include(${DREAM3DLib_SOURCE_DIR}/StatisticsFilters/SourceList.cmake)
include(${DREAM3DLib_SOURCE_DIR}/SurfaceMeshFilters/SourceList.cmake)
include(${DREAM3DLib_SOURCE_DIR}/SyntheticBuilderFilters/SourceList.cmake)

#-----------------------------------------------------
# Close up all the files that we just generated
file(APPEND ${AllFiltersHeaderFile} "\n#endif\n")
file(APPEND ${AllFilterWidgetsHeaderFile} "\n#endif\n")
file(APPEND ${RegisterKnownFilterWidgetsFile} "\n }\n")
file(APPEND ${HtmlDocQrcFile} "  </qresource>\n</RCC>\n")

#--------------------------
include_directories( ${HDF5_INCLUDE_DIR} )
include_directories( ${PROJECT_CODE_DIR} )
include_directories( ${DREAM3DLib_BINARY_DIR} )


#-- Add a library for the DREAM3DLib Code
add_library(${PROJECT_NAME} ${LIB_TYPE} ${Project_SRCS} )
target_link_libraries(${PROJECT_NAME} MXA EbsdLib ${TBB_LIBRARIES} )
LibraryProperties( ${PROJECT_NAME} ${EXE_DEBUG_EXTENSION} )

set(install_dir "tools")
set(lib_install_dir "lib")
if (WIN32)
    set (install_dir ".")
    set(lib_install_dir "")
endif()


if (BUILD_SHARED_LIBS  AND NOT APPLE)
    INSTALL(TARGETS ${PROJECT_NAME}
        COMPONENT Applications
        RUNTIME DESTINATION ${install_dir}
        LIBRARY DESTINATION ${lib_install_dir}
        ARCHIVE DESTINATION ${lib_install_dir}
        BUNDLE DESTINATION "."
    )
endif()

