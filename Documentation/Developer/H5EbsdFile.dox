/*!

@page h5ebsdfile EBSD HDF5 Data File Specification


@section h5ebsd0 Orientations, Reference Frames and Coordinate Systems
  DREAM.3D's origin follows the sample coordinate system so that the physical
location of the 0 row and 0 column voxel should visually appear in the lower
left corner of a computer graphics display.

@image html CoordinateSystem1.png "Sample Coordinate System (White) overlayed with EBSD Coordinate System (Yellow)"
@image latex CoordinateSystem1.png "Sample Coordinate System (White) overlayed with EBSD Coordinate System (Yellow)" width=3in

 Commercial EBSD acquisition systems do not typically follow this convention and
DREAM.3D needs input from the user so that the proper transformations to the data
can be applied during the Reconstruction and other analysis. Commercial EBSD software
packages allow for some initial transformations of the data in which case the
DREAM.3D environment does not have any way of determining if those transformations
have already occured. During the import process the user is asked a few questions
regarding the orientation of their EBSD data in relation to the sample coordinate
system. Currently there are 3 items that must be answered otherwise undefined behavior
may occur during any of the analysis algorithms.

@li Some Commercial EBSD acquisition systems allow for a <b>scan rotation</b> which
rotates the sample coordinate system 180 degrees around the Z axis.
@li Something here
@li Should we rotate the Euler angles to bring them in line with the sample
reference frame?


@section h5ebsd1 Introduction
  The EBSD Data from multiple vendors are stored in a data file using the HDF5
file format library. While the general layout of the HDF5 file is the same between
vendors there are details that are NOT the same between vendors because each
vendors chooses to save different types of data. The top level datasets that
deal with the basic volume information is the same for every file.

@section h5ebsd2 HDF5 File Layout

@code
/-|
  | Index  HDF Dataset
  | AlignEulers   HDF Dataset
  | Manufacturer  HDF Dataset
  | Max X Points  HDF Dataset
  | Max Y Points  HDF Dataset
  | ReorderArray  HDF Dataset
  | RotateSlice   HDF Dataset
  | Stacking Order HDF Dataset
  | X Resolution  HDF Dataset
  | Y Resolution  HDF Dataset
  | Z Resolution  HDF Dataset
  | ZEndIndex  HDF Dataset
  | ZStartIndex  HDF Dataset
  | "EBSD Slice Group" HDF Group
     |- "Data" HDF Group
     |- "Header" HDF Group
         |- "Phases" HDF Group

@endcode


@section h5ebsd3 Detailed Description



The <b>Stacking Order</b> refers to the order in which the z slices are stacked
together when they are read from the file. The enumerations are also in the
EbsdLibConstants.h header file:
@code
  enum RefFrameZDir
  {
     IntoSlice = 0, // Low to High
     OutofSlice = 1, // High to Low
     UnknownRefFrameZDirection
  };

    const std::string LowToHigh("Low To High");
    const std::string HighToLow("High To Low");
    const std::string UnknownStackingOrder("Unknown Stacking Order");
@endcode

  As a further explanation if the ordering is <tt><b>"Low To High"</b></tt> then the
slice with the lowest number is positioned at Z=0 in 3D Cartesian space. For example
if your data set is numbered from 23 to 86 with file names of the form Slice_023.ang
and you select "Low To High" then the data inside of file Slice_023.ang will be
positioned at Z=0 during any method that has to deal with the data. The opposite
of this is if the user were to select to have their data <tt><b>"High to Low"</b></tt>
in which case the file with name Slice_086.ang will be positioned at Z=0 and the
file with name "Slice_023.ang" will be positioned at Z=64.\n


The <b>Manufacturer</b> currently is either <i>TSL</i> or <i>HKL</i>



 */
