/*!

@page writingplugins Writing a Plugin


@section pluginintro Introduction
  Creating a plugin for the DREAM.3D Application involves many different types of
files being created and being placed in the correct positions in the project directory.
To alleviate the developer of the tedious task of creating all of these files there
is a shortcut that has been written using the CMake build system.@n
@n
 The developer needs to clone the git repository using the following command:
@code
  git clone git://scm.bluequartz.net/DREAM3DPluginTemplate.git
@endcode
or you can get a compressed archive from the following web site:

@n
Launch the CMake-Gui.exe or CMake-GUI.app (or ccmake on Linux). Click the "Configure" button
or type the 'c' key if using ccmake. This will reveal another variable called <b>
PluginName</b>. Enter the Name of your Plugin for this variable. You do
<b>NOT</b> and should NOT end the name with "Plugin". The code will do this step
for you. If you want the code generated in another location that is different than
the default location then set the <b>Plugin_OutputDir</b> CMake variable.
   Click the "configure" button or type the 'c' key for ccmake and CMake will
now generate all the necessary files for the new plugin into the current build
directory. If you look in the build directory for the project you will now see
a folder with the name you set in the <b>PluginName</b> CMake variable. This
folder contains everything you need to start writing your new plugin. <b>Move</b> this
folder to another location so that it will not get over written the next time CMake
is executed.@n
@n
  Now that we have the plugin files ready to go we need to tell the DREAM.3D build
system where to find the new plugin. Go back to CMake-GUI.app/CMake-GUI.exe/ccmake
and set the <b>DREAM3D_EXTRA_PLUGINS</b> cmake variable to have the name of your
plugin. If you are building multiple extra plugins then use a semi-colon ";" to
separate each plugin name. You may have to tell CMake where the source directory
is for the new plugin at which point you will be prompted to enter that path into
CMake.

@section filedescription File Descriptions
  For example, if you wanted to create a plugin called "GrainAnalyzer" then you
would end up with the following files:


@section comments1 Misc Comments
  Most of the plugins also have a console version of the code that can be run from
a termninal environment. While template code is not available at this time the
programmer can optionally create this type of program/executable if they see fit.
Inspecting some of the other plugins should yield the proper clues on how to set
everything up in both code and CMake.

*/
