message(STATUS "************* DOCUMENTATION ****************")
message(STATUS "SIMPL_USE_MKDOCS: ${SIMPL_USE_MKDOCS}")
message(STATUS "SIMPL_USE_DISCOUNT: ${SIMPL_USE_DISCOUNT}")


set(RefManual_Docs_AuxiliaryTools
    DevHelper
    PipelineRunner
  )

set(RefManual_Docs_Developer
    CodeGuidelines
    CompilerSuite
    CreatingAFilter
    Linux_Configuring_and_Building_DREAM3D
    OSX_Configuring_and_Building_DREAM3D
    RepositoryLayout
    SDKInstall
    SourceDownload
    Windows_Configuring_and_Building_DREAM3D
    WritingAFilter
  )

set(RefManual_Docs_ReleaseNotes
    Contributors
    Acknowledgements
    ReleaseNotes_6_0_0
    ReleaseNotes_6_1_0
    ReleaseNotes_6_2_0
    ReleaseNotes_6_3_0
    ReleaseNotes_6_4_0
  )

set(RefManual_Docs_SupportedFileFormats
    H5EbsdFile
    Misc_File_Formats
    Native_DREAM3D_File_Format
    Xdmf_For_Visualization
  )

set(RefManual_Docs_Tutorials
    CroppingData
    EBSDReconstruction
    SurfaceMeshing
    SyntheticSinglePhase
  )

set(RefManual_Docs_UsingDREAM3D
    A_DataStructure
    B_UserInterface
    C_CreatingPipeline
    D_ImportExportPipelines
    E_Reference_Frame_Notes
  )

set(RefManual_Groups
      1_UsingDREAM3D
      2_Tutorials
      3_SupportedFileFormats
      4_AuxiliaryTools
      5_ReleaseNotes
      6_Developer
    )

# --------------------------------------------------------------------------
macro(ConvertPathToHeaderCompatible INPUT)
    if(WIN32)
      STRING(REPLACE "\\" "\\\\" ${INPUT} ${INPUT} )
      STRING(REPLACE "/" "\\\\" ${INPUT} ${INPUT}  )
    endif()
endmacro()


set(DREAM3DProj_SOURCE_DIR_NORM ${DREAM3DProj_SOURCE_DIR})
ConvertPathToHeaderCompatible(${DREAM3DProj_SOURCE_DIR_NORM})
set(SIMPLib_SOURCE_DIR_NORM ${SIMPLib_SOURCE_DIR})
ConvertPathToHeaderCompatible(${SIMPLib_SOURCE_DIR_NORM})
set(SIMPLib_PLUGIN_DIR_NORM "${DREAM3DProj_SOURCE_DIR}/Source/Plugins")
ConvertPathToHeaderCompatible(${SIMPLib_PLUGIN_DIR_NORM})

get_filename_component(DREAM3DProj_PARENT_DIR_NORM ${DREAM3DProj_SOURCE_DIR} PATH)
ConvertPathToHeaderCompatible(${DREAM3DProj_PARENT_DIR_NORM})


# ------------------------------------------------------------------------------
if(SIMPL_USE_MKDOCS)
  message(STATUS "MkDocs being used to generate HTML Files")
  # get_property(DREAM3DDocRoot GLOBAL PROPERTY DREAM3DDocRoot)
  # add_custom_target(REFMANUAL_DOC_FOLDER_COPY ALL
  #   COMMAND ${CMAKE_COMMAND} -E copy_directory "${DREAM3DProj_SOURCE_DIR}/Documentation/ReferenceManual/"
  #   "${DREAM3DDocRoot}/ReferenceManual/"
  #   COMMENT "REFMANUAL_DOC_FOLDER_COPY: Copying Documentation to build directory")
  # set_target_properties(REFMANUAL_DOC_FOLDER_COPY PROPERTIES FOLDER ZZ_COPY_FILES)
  if(APPLE)
    set(HTML_OUTPUT_DIR "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${DREAM3D_PACKAGE_DEST_PREFIX}Resources/Help/DREAM3D")
  else()
    set(HTML_OUTPUT_DIR "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Help/DREAM3D")
  endif()


  configure_file(${DREAM3DProj_SOURCE_DIR}/Documentation/mkdocs.yml
    ${DREAM3DDocRoot}/mkdocs/mkdocs.yml
    )

  set(docsCmakeFile "${DREAM3DDocRoot}/MkDocsGeneration.cmake")
  set(docsDestDir "${DREAM3DDocRoot}/mkdocs/ReferenceManual")
  file(WRITE "${docsCmakeFile}" "# This file is automatically generated\n")
  get_property(DREAM3DDoc_GROUPS GLOBAL PROPERTY DREAM3DDoc_GROUPS)
  foreach(DocGroup ${DREAM3DDoc_GROUPS})
    file(APPEND "${docsCmakeFile}" "# ${DocGroup}\n")
    if(${DocGroup} STREQUAL "Core" OR ${DocGroup} STREQUAL "Test")
      #message(STATUS "${DocGroup}_SOURCE_DIR: ${${DocGroup}_SOURCE_DIR}")
      string(REPLACE "/${DocGroup}Filters" "/Documentation/SIMPLibFilters" tempstring ${${DocGroup}_SOURCE_DIR})
      #message(STATUS "tempstring: ${tempstring}")
      file(APPEND "${docsCmakeFile}" "file(COPY \n       \"${tempstring}/${DocGroup}Filters\"
     DESTINATION
     \"${docsDestDir}/Filters\")\n")
    else()
      file(APPEND "${docsCmakeFile}" "file(COPY \n      \"${${DocGroup}_SOURCE_DIR}/Documentation/${DocGroup}Filters\"
     DESTINATION
      \"${docsDestDir}/Filters\")\n")
    #   file(APPEND "${docsCmakeFile}"
    #  "file(RENAME
    #  \"${docsDestDir}/Filters/${DocGroup}Filters\"
    #  \"${docsDestDir}/Filters/${DocGroup}\")\n")
    endif()
  endforeach()

  foreach(DocGroup ${RefManual_Groups})
    file(APPEND "${docsCmakeFile}" "# ${DocGroup}\n")
    file(APPEND "${docsCmakeFile}" "file(COPY \n       \"${DREAM3DProj_SOURCE_DIR}/Documentation/ReferenceManual/${DocGroup}\"
     DESTINATION
     \"${docsDestDir}\")\n")
  endforeach()

  file(APPEND "${docsCmakeFile}" "# Main Index File\n")
  file(APPEND "${docsCmakeFile}" "file(COPY \n       \"${DREAM3DProj_SOURCE_DIR}/Documentation/ReferenceManual/Index.md\"
     DESTINATION
     \"${docsDestDir}\")\n")
  file(APPEND "${docsCmakeFile}" "file(RENAME \"${docsDestDir}/Index.md\" \"${docsDestDir}/index.md\")\n")

  file(APPEND "${docsCmakeFile}" "file(COPY \n       \"${BrandedSIMPLView_DIR}/icons/DREAM3D (PNG)/128x128.png\"
     DESTINATION
     \"${docsDestDir}\")\n")
  file(APPEND "${docsCmakeFile}" "file(RENAME \"${docsDestDir}/128x128.png\" \"${docsDestDir}/logo.png\")\n")

  find_package(PythonInterp)


  if(NOT MKDOCS_EXECUTABLE)
    find_program (
          MKDOCS_EXECUTABLE
          mkdocs
    )
    if("${MKDOCS_EXECUTABLE}" STREQUAL "MKDOCS_EXECUTABLE-NOTFOUND")
      message(FATAL_ERROR "mkdocs was not found on your system. Typical installation under python is\n\
      pip install mkdocs-material\n\
      You may also need to do\n\
      pip install msgpack\n\
      If you are on macOS and are having trouble installing to try adding the --user to the above commands\n\
      to install those python modules into your home directory.\n\
      You can also define PYTHON_EXECUTABLE and MKDOCS_EXECUTABLE in your DREAM3D_SDK.cmake file or on the command line\n\
      using the standard '-DPYTHON_EXECUTABLE=.....' syntax")
    endif()
  endif()
  

  if(APPLE)
    set(MKDOCS_EXECUTABLE_SCRIPT "${DREAM3DDocRoot}/ReferenceManual/mkdocs")
    file(WRITE "${MKDOCS_EXECUTABLE_SCRIPT}" "#!${PYTHON_EXECUTABLE}\n")
    file(APPEND "${MKDOCS_EXECUTABLE_SCRIPT}" "# -*- coding: utf-8 -*-\n")
    file(APPEND "${MKDOCS_EXECUTABLE_SCRIPT}" "#    This script is generated automatically from CMake for macOS systems to get the encoding correct.\n")
    file(APPEND "${MKDOCS_EXECUTABLE_SCRIPT}" "#    Generated in code from ${CMAKE_CURRENT_LIST_FILE}\n")
    file(APPEND "${MKDOCS_EXECUTABLE_SCRIPT}" "import re\n")
    file(APPEND "${MKDOCS_EXECUTABLE_SCRIPT}" "import sys\n")
    file(APPEND "${MKDOCS_EXECUTABLE_SCRIPT}" "from mkdocs.__main__ import cli\n")
    file(APPEND "${MKDOCS_EXECUTABLE_SCRIPT}" "if __name__ == '__main__':\n")
    file(APPEND "${MKDOCS_EXECUTABLE_SCRIPT}" "  sys.argv[0] = re.sub(r'(-script\.pyw?|\.exe)?$', '', sys.argv[0])\n")
    file(APPEND "${MKDOCS_EXECUTABLE_SCRIPT}" "  sys.exit(cli())\n")
    file(APPEND "${MKDOCS_EXECUTABLE_SCRIPT}" "\n")
    execute_process(COMMAND "/bin/chmod" ug+rwx ${MKDOCS_EXECUTABLE_SCRIPT}
                  OUTPUT_VARIABLE chmod_output
                  RESULT_VARIABLE chmod_result
                  ERROR_VARIABLE chmod_error
                  WORKING_DIRECTORY ${DREAM3DDocRoot}/ReferenceManual
    )
    if(DEBUG)
      message(STATUS "chmod_output: ${chmod_output}")
      message(STATUS "chmod_result: ${chmod_result}")
      message(STATUS "chmod_error: ${chmod_error}")
    endif()
    set(MKDOCS_EXECUTABLE "${MKDOCS_EXECUTABLE_SCRIPT}")
  else()
    # Find Python Executable
    if("${PYTHON_EXECUTABLE}" STREQUAL "")
        find_program(PYTHON_EXECUTABLE
                      NAMES python python.exe python3 python3.exe)
    endif()

    # Now try to find mkdocs based off the path for python?
    if(EXISTS ${PYTHON_EXECUTABLE})
      get_filename_component(PYTHON_DIR ${PYTHON_EXECUTABLE} DIRECTORY)
      find_program(MKDOCS_EXECUTABLE
                  NAMES mkdocs mkdocs.exe
                  PATHS ${PYTHON_DIR}/Scripts
                  )
    endif()
  endif()

  message(STATUS "PYTHON_EXECUTABLE: ${PYTHON_EXECUTABLE}")
  if("${PYTHON_EXECUTABLE}" STREQUAL "PYTHON_EXECUTABLE-NOTFOUND")
    message(FATAL_ERROR "Python was not found. Please set the 'PYTHON_EXECUTABLE' variable manually or install python.")
  endif()

  message(STATUS "MKDOCS_EXECUTABLE: ${MKDOCS_EXECUTABLE}")
  if("${MKDOCS_EXECUTABLE}" STREQUAL "MKDOCS_EXECUTABLE-NOTFOUND")
    message(FATAL_ERROR "Python Module 'mkdocs' was not found. Please use 'pip install mkdocs mkdocs-material' to install it correctly.")
  endif()

  set(docsStampFile "${DREAM3DDocRoot}/MkDocsGeneration.stamp")
  string(TIMESTAMP mkdocsTimeStamp %Y:%m:%d:%H:%M:%S)
  #----------------------------------------------------------------------------
  # Write out a time stamp file which signals the script that the mkdocs needs
  # to run during the compile process.
  file(WRITE "${docsStampFile}" "${mkdocsTimeStamp}")


  file(APPEND "${docsCmakeFile}" "\n\n")
  file(APPEND "${docsCmakeFile}" "#--------------------------------------------------------------\n")
  file(APPEND "${docsCmakeFile}" "# Execute the 'mkdocs' python command to generate the docs\n")
  file(APPEND "${docsCmakeFile}" "if(EXISTS \"${docsStampFile}\")\n")
  file(APPEND "${docsCmakeFile}" "  message(STATUS \"MKDOCS: Generating documentation. This can take a while.....\")\n")
  file(APPEND "${docsCmakeFile}" "  execute_process(COMMAND \"${MKDOCS_EXECUTABLE}\" build\n")
  file(APPEND "${docsCmakeFile}" "                OUTPUT_VARIABLE mkdocs_gen_output\n")
  file(APPEND "${docsCmakeFile}" "                RESULT_VARIABLE mkdocs_gen_result\n")
  file(APPEND "${docsCmakeFile}" "                ERROR_VARIABLE mkdocs_gen_error\n")
  file(APPEND "${docsCmakeFile}" "                WORKING_DIRECTORY \"${DREAM3DDocRoot}/mkdocs\"\n")
  file(APPEND "${docsCmakeFile}" "                )\n")
  file(APPEND "${docsCmakeFile}" "  if(NOT \"\${mkdocs_gen_result}\" STREQUAL \"0\")\n")
  file(APPEND "${docsCmakeFile}" "    message(STATUS \"MKDOCS: mkdocs_gen_result: \${mkdocs_gen_result}\")\n")
  file(APPEND "${docsCmakeFile}" "    message(STATUS \"MKDOCS: mkdocs_gen_error:  \${mkdocs_gen_error}\")\n")
  file(APPEND "${docsCmakeFile}" "    message(STATUS \"MKDOCS_EXECUTABLE:  ${MKDOCS_EXECUTABLE}\")\n")
  file(APPEND "${docsCmakeFile}" "    message(STATUS \"PYTHON_EXECUTABLE:  ${PYTHON_EXECUTABLE}\")\n")
  file(APPEND "${docsCmakeFile}" "    #message(STATUS \"**************************************************************************\")\n")
  file(APPEND "${docsCmakeFile}" "    #message(STATUS \"MKDOCS: mkdocs_gen_output: \${mkdocs_gen_output}\")\n")
  file(APPEND "${docsCmakeFile}" "    #message(STATUS \"**************************************************************************\")\n")
  file(APPEND "${docsCmakeFile}" "    message(FATAL_ERROR \"\${CMAKE_CURRENT_LIST_FILE}:00:00: error: mkdocs_gen_error=\${mkdocs_gen_error}   mkdocs_gen_output=\${mkdocs_gen_output}\")\n")
  file(APPEND "${docsCmakeFile}" "  else()\n")
  file(APPEND "${docsCmakeFile}" "    file(REMOVE \"${docsStampFile}\")\n")
  file(APPEND "${docsCmakeFile}" "  endif()\n")
  file(APPEND "${docsCmakeFile}" "else()\n")
  file(APPEND "${docsCmakeFile}" "  message(STATUS \"MKDOCS: No Work To Do.\")\n")
  file(APPEND "${docsCmakeFile}" "endif()\n")
  file(APPEND "${docsCmakeFile}" "# END OF FILE\n")

  #----------------------------------------------------------------------------
  # Add the custom target to run mkdocs
  add_custom_target(DREAM3D_MKDOCS_GENERATION ALL
    COMMAND "${CMAKE_COMMAND}" -P "${docsCmakeFile}"
    COMMENT "using mkdocs to generate the documentation"
  )


  if(APPLE)

  else()
    install(DIRECTORY ${HTML_OUTPUT_DIR}
            DESTINATION "Help"
    )
  endif()


endif()

# ------------------------------------------------------------------------------
# This is an experimental tool that will convert all the markdown documents to
# html with styling provided by CSS. This is an experimental way of removing the
# DOxygen generated docs with it's insecure jquery.js file.
if(SIMPL_USE_DISCOUNT)

  find_package(discount)
  if(discount_FOUND)
    message(STATUS "Discount Markdown->HTML library found.")

    # -----------------------------------------------------------------------------
    # This is example code that loops over all the DocGroups and each .md file within
    # that group.
    set(PluginJsonFile "${DREAM3DDocRoot}/ReferenceManual/PluginIndex.json")
    file(WRITE "${PluginJsonFile}" "{\n")
    file(APPEND "${PluginJsonFile}" "  \"Plugins\": {\n")

    get_property(DREAM3DDoc_GROUPS GLOBAL PROPERTY DREAM3DDoc_GROUPS)
    set(NEED_COMMA_DOC_GROUP 0)
    foreach(DocGroup ${DREAM3DDoc_GROUPS})
      #message(STATUS "  DocGroup: ${${DocGroup}_SOURCE_DIR}" )

      if(NEED_COMMA_DOC_GROUP)
        file(APPEND "${PluginJsonFile}" " ,\n")
      endif()
      if(NOT NEED_COMMA_DOC_GROUP)
        set(NEED_COMMA_DOC_GROUP 1)
      endif()
      file(APPEND "${PluginJsonFile}" "  \"${DocGroup}\": { \n")

      if(${DocGroup} STREQUAL "Core" OR ${DocGroup} STREQUAL "Test")
        get_filename_component(core_PARENT ${${DocGroup}_SOURCE_DIR} DIRECTORY)

        file(APPEND "${PluginJsonFile}" "    \"SOURCE_DIR\": \"${core_PARENT}\",\n")
        file(APPEND "${PluginJsonFile}" "    \"DOC_DIR\": \"Documentation/SIMPLibFilters/${DocGroup}Filters\",\n")
        if(EXISTS "${core_PARENT}/Documentation/SIMPLibFilters/${DocGroup}Filters/Images")
          file(APPEND "${PluginJsonFile}" "    \"IMAGES_DIR\": \"Documentation/SIMPLibFilters/${DocGroup}Filters/Images\",\n")
        endif()

      else()
        file(APPEND "${PluginJsonFile}" "    \"SOURCE_DIR\": \"${${DocGroup}_SOURCE_DIR}\",\n")
        file(APPEND "${PluginJsonFile}" "    \"DOC_DIR\": \"Documentation/${DocGroup}Filters\",\n")
        if(EXISTS "${${DocGroup}_SOURCE_DIR}/Documentation/${DocGroup}Filters/Images")
          file(APPEND "${PluginJsonFile}" "    \"IMAGES_DIR\": \"Documentation/${DocGroup}Filters/Images\",\n")
        endif()

      endif()


      file(APPEND "${PluginJsonFile}" "    \"FILTERS\": [\n")

      get_property(DocGroupList GLOBAL PROPERTY DREAM3DDoc_${DocGroup}Filters)
      set(NEED_COMMA_DOC_ITEM 0)
      foreach(docListItem ${DocGroupList})
        if(NEED_COMMA_DOC_ITEM)
          file(APPEND "${PluginJsonFile}" "  ,\n")
        endif()
        if(NOT NEED_COMMA_DOC_ITEM)
          set(NEED_COMMA_DOC_ITEM 1)
        endif()

        if(${DocGroup} STREQUAL "Core" OR ${DocGroup} STREQUAL "Test")
          string(REPLACE "/${DocGroup}Filters" "/Documentation/SIMPLibFilters/${DocGroup}Filters" tempstring ${${DocGroup}_SOURCE_DIR})
          string(REPLACE "${tempstring}/" "" tempstring ${docListItem})
          string(REPLACE "Filters" "" tempstring ${tempstring})
          string(REPLACE "Plugins/${DocGroup}/" "" filterName ${tempstring})
          string(REPLACE ".md" "" filterName ${filterName})
          file(APPEND "${PluginJsonFile}" "        \"${filterName}\"")
        else()
          string(REPLACE "${${DocGroup}_SOURCE_DIR}/Documentation/" "" tempstring ${docListItem})
          string(REPLACE "Filters" "" tempstring ${tempstring})
          string(REPLACE "${DocGroup}/" "" filterName ${tempstring})
          string(REPLACE ".md" "" filterName ${filterName})
          string(REPLACE ".md" ".html" tempstring ${tempstring})
          file(APPEND "${PluginJsonFile}" "        \"${filterName}\"")
        endif()
      endforeach()
      file(APPEND "${PluginJsonFile}" "    ]\n")
      file(APPEND "${PluginJsonFile}" "\n  }")
    endforeach()
    file(APPEND "${PluginJsonFile}" "\n  } ,")
    #------------------------------------------------------------------------------
    # This section of code generates the JSON file that has everything else from the
    # documentation set
    file(APPEND "${PluginJsonFile}" "\n  \"ReferenceManual\": {\n")
    set(NEED_COMMA_DOC_GROUP 0)
    foreach(DocGroup ${RefManual_Groups})
      if(NEED_COMMA_DOC_GROUP)
        file(APPEND "${PluginJsonFile}" " ,\n")
      endif()
      if(NOT NEED_COMMA_DOC_GROUP)
        set(NEED_COMMA_DOC_GROUP 1)
      endif()
      file(APPEND "${PluginJsonFile}" "    \"${DocGroup}\": { \n")
      file(APPEND "${PluginJsonFile}" "      \"SOURCE_DIR\": \"${DREAM3DProj_SOURCE_DIR}/Documentation/ReferenceManual\",\n")
      file(APPEND "${PluginJsonFile}" "      \"DOC_DIR\": \"${DocGroup}\",\n")
      if(EXISTS "${DREAM3DProj_SOURCE_DIR}/Documentation/ReferenceManual/${DocGroup}/Images")
        file(APPEND "${PluginJsonFile}" "      \"IMAGES_DIR\": \"${DocGroup}/Images\",\n")
      endif()
      file(APPEND "${PluginJsonFile}" "      \"FILTERS\": [\n")

      set(NEED_COMMA_DOC_ITEM 0)
      foreach(docListItem ${RefManual_Docs_${DocGroup}})
        if(NEED_COMMA_DOC_ITEM)
          file(APPEND "${PluginJsonFile}" "  ,\n")
        endif()
        if(NOT NEED_COMMA_DOC_ITEM)
          set(NEED_COMMA_DOC_ITEM 1)
        endif()
        file(APPEND "${PluginJsonFile}" "        \"${docListItem}\"")
      endforeach()
      file(APPEND "${PluginJsonFile}" "    ]\n")
      file(APPEND "${PluginJsonFile}" "  }")
    endforeach()
    #file(APPEND "${PluginJsonFile}" "\n  }")

    file(APPEND "${PluginJsonFile}" "   ,\n")
    file(APPEND "${PluginJsonFile}" "  \"Index\": { \n")
    file(APPEND "${PluginJsonFile}" "      \"SOURCE_DIR\": \"${DREAM3DProj_SOURCE_DIR}/Documentation/ReferenceManual\",\n")
    file(APPEND "${PluginJsonFile}" "      \"DOC_DIR\": \"\",\n")
    file(APPEND "${PluginJsonFile}" "      \"IMAGES_DIR\": \"Images\",\n")
    file(APPEND "${PluginJsonFile}" "      \"FILTERS\": [\n")
    file(APPEND "${PluginJsonFile}" "        \"Index\"")
    file(APPEND "${PluginJsonFile}" "       ]\n")
    file(APPEND "${PluginJsonFile}" "    }")
    file(APPEND "${PluginJsonFile}" "\n }")
    # This Bit of JSON is the last part of the file
    file(APPEND "${PluginJsonFile}" "\n}\n")

    # configure_file(${DREAM3DProj_SOURCE_DIR}/Documentation/mkdocs.yml
    #   ${DREAM3DDocRoot}/mkdocs.yml
    #   )

    # configure_file("${BrandedSIMPLView_DIR}/icons/DREAM3D (PNG)/128x128.png"
    #   ${DREAM3DDocRoot}/ReferenceManual/logo.png COPYONLY
    #   )

    get_filename_component(WORKSPACE_DIR "${DREAM3DProj_SOURCE_DIR}" DIRECTORY)
    if(EXISTS "${WORKSPACE_DIR}/DREAM3DSuperbuild")
      add_custom_target(SUPERBUILD_DOC_FOLDER_COPY ALL
        COMMAND ${CMAKE_COMMAND} -E copy_directory "${WORKSPACE_DIR}/DREAM3DSuperbuild/docs"
        "${DREAM3DDocRoot}/ReferenceManual/Developer/"
        COMMENT "SUPERBUILD_DOC_FOLDER_COPY: Copying Documentation to build directory")
      set_target_properties(SUPERBUILD_DOC_FOLDER_COPY PROPERTIES FOLDER ZZ_COPY_FILES)

    endif()

    if(APPLE)
      set(HTML_OUTPUT_DIR "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${DREAM3D_PACKAGE_DEST_PREFIX}Resources/Help/DREAM3D")
    else()
      set(HTML_OUTPUT_DIR "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Help/DREAM3D")
    endif()

    configure_file( ${DREAM3DProj_SOURCE_DIR}/Documentation/Tools/ToolConfiguration.h.in
                    ${DREAM3DProj_BINARY_DIR}/Documentation/ReferenceManual/DocToolsConfiguration.h)


    add_executable(GenerateHTMLDocs
      ${DREAM3DProj_SOURCE_DIR}/Documentation/Tools/GenerateHTMLDocs.cpp
      ${DREAM3DProj_BINARY_DIR}/Documentation/ReferenceManual/DocToolsConfiguration.h
    )
    target_include_directories(GenerateHTMLDocs INTERFACE discount::libmarkdown)
    target_link_libraries(GenerateHTMLDocs Qt5::Core discount::libmarkdown SIMPLib)
    #-- Set the Debug Suffix for the application
    set_target_properties( GenerateHTMLDocs
                PROPERTIES
                DEBUG_OUTPUT_NAME GenerateHTMLDocs${EXE_DEBUG_EXTENSION}
                RELEASE_OUTPUT_NAME GenerateHTMLDocs
    )

    get_property(COPY_LIBRARY_TARGETS GLOBAL PROPERTY COPY_LIBRARY_TARGETS)
    add_custom_target(GenerateDiscountDocs ALL
      COMMAND GenerateHTMLDocs
      DEPENDS ${COPY_LIBRARY_TARGETS} DREAM3D
      COMMENT "Using Discount to generate HTML Documentation"
    )

    if(APPLE)

    else()
      install(DIRECTORY ${HTML_OUTPUT_DIR}/
              DESTINATION "."
      )
    endif()

  else()
    set(SIMPL_USE_DISCOUNT OFF)
    message(STATUS "Discount package was NOT found. Documentation will NOT be generated")
  endif()

endif()

