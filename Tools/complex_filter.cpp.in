#include "@FILTER_NAME@.hpp"

#include "complex/DataStructure/DataPath.hpp"
@PARAMETER_INCLUDES@
using namespace complex;

namespace complex
{
//------------------------------------------------------------------------------
std::string @FILTER_NAME@::name() const
{
  return FilterTraits<@FILTER_NAME@>::name.str();
}

//------------------------------------------------------------------------------
std::string @FILTER_NAME@::className() const
{
  return FilterTraits<@FILTER_NAME@>::className;
}

//------------------------------------------------------------------------------
Uuid @FILTER_NAME@::uuid() const
{
  return FilterTraits<@FILTER_NAME@>::uuid;
}

//------------------------------------------------------------------------------
std::string @FILTER_NAME@::humanName() const
{
  return "@FILTER_HUMAN_NAME@";
}

//------------------------------------------------------------------------------
std::vector<std::string> @FILTER_NAME@::defaultTags() const
{
  return {@DEFAULT_TAGS@};
}

//------------------------------------------------------------------------------
Parameters @FILTER_NAME@::parameters() const
{
  Parameters params;
  // Create the parameter descriptors that are needed for this filter
@PARAMETER_DEFS@
  return params;
}

//------------------------------------------------------------------------------
IFilter::UniquePointer @FILTER_NAME@::clone() const
{
  return std::make_unique<@FILTER_NAME@>();
}

//------------------------------------------------------------------------------
IFilter::PreflightResult @FILTER_NAME@::preflightImpl(const DataStructure& ds, const Arguments& filterArgs, const MessageHandler& messageHandler) const
{
  /****************************************************************************
   * Write any preflight sanity checking codes in this function
   ***************************************************************************/

  /**
   * These are the values that were gathered from the UI or the pipeline file or
   * otherwise passed into the filter. These are here for your convenience. If you
   * do not need some of them remove them.
   */
@PREFLIGHT_DEFS@
@PREFLIGHT_UPDATED_DEFS@

  // Declare the preflightResult variable that will be populated with the results
  // of the preflight. The PreflightResult type contains the output Actions and
  // any preflight updated values that you want to be displayed to the user, typically
  // through a user interface (UI).
  PreflightResult preflightResult;

#if 0
  // Define the OutputActions Object that will hold the actions that would take
  // place if the filter were to execute. This is mainly what would happen to the
  // DataStructure during this filter, i.e., what modificationst to the DataStructure
  // would take place.
  OutputActions actions;
  // Define a custom class that generates the changes to the DataStructure.
  auto action = std::make_unique<@FILTER_NAME@Action>();
  actions.actions.push_back(std::move(action));
  // Assign the generated outputActions to the PreflightResult::OutputActions property
  preflightResult.outputActions = std::move(actions);
#endif


@PREFLIGHT_UPDATED_VALUES@
  return preflightResult;
}

//------------------------------------------------------------------------------
Result<> @FILTER_NAME@::executeImpl(DataStructure& data, const Arguments& filterArgs, const PipelineFilter* pipelineNode, const MessageHandler& messageHandler) const
{
  /****************************************************************************
   * Extract the actual input values from the 'filterArgs' object
   ***************************************************************************/
@PREFLIGHT_DEFS@
  /****************************************************************************
   * Write your algorithm implementation in this function
   ***************************************************************************/

  return {};
}
} // namespace complex
