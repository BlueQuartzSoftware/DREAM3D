#include "@FILTER_NAME@.hpp"

#include "complex/DataStructure/DataPath.hpp"
@PARAMETER_INCLUDES@
using namespace complex;

namespace complex
{
std::string @FILTER_NAME@::name() const
{
  return FilterTraits<@FILTER_NAME@>::name.str();
}

Uuid @FILTER_NAME@::uuid() const
{
  return FilterTraits<@FILTER_NAME@>::uuid;
}

std::string @FILTER_NAME@::humanName() const
{
  return "@FILTER_HUMAN_NAME@";
}

Parameters @FILTER_NAME@::parameters() const
{
  Parameters params;
  // Create the parameter descriptors that are needed for this filter
@PARAMETER_DEFS@
  return params;
}

IFilter::UniquePointer @FILTER_NAME@::clone() const
{
  return std::make_unique<@FILTER_NAME@>();
}

Result<OutputActions> @FILTER_NAME@::preflightImpl(const DataStructure& ds, const Arguments& filterArgs, const MessageHandler& messageHandler) const
{
  /****************************************************************************
   * Write any preflight sanity checking codes in this function
   ***************************************************************************/
@PREFLIGHT_DEFS@
  OutputActions actions;
#if 0
  // Define a custom class that generates the changes to the DataStructure.
  auto action = std::make_unique<@FILTER_NAME@Action>();
  actions.actions.push_back(std::move(action));
#endif
  return {std::move(actions)};
}

Result<> @FILTER_NAME@::executeImpl(DataStructure& ds, const Arguments& filterArgs, const MessageHandler& messageHandler) const
{
  /****************************************************************************
   * Extract the actual input values from the 'filterArgs' object
   ***************************************************************************/
@PREFLIGHT_DEFS@
  /****************************************************************************
   * Write your algorithm implementation in this function
   ***************************************************************************/

  return {};
}
} // namespace complex
